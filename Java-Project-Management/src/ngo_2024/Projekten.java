/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ngo_2024;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Märta Sjöblom
 */
public class Projekten extends javax.swing.JPanel {
    
    private InfDB idb;

    /**
     * Creates new form Projekten
     */
    public Projekten(InfDB idb) {
        this.idb = idb;
        initComponents();
        fyllCmbAvdelningar();
        hamtaProjekt();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProjekt = new javax.swing.JTable();
        btnHämtaProjekt = new javax.swing.JButton();
        btnÄndraProjekt = new javax.swing.JButton();
        btnTaBortProjekt = new javax.swing.JButton();
        btnNyttProjekt = new javax.swing.JButton();
        cmbAvdelningsVal = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(900, 480));

        tblProjekt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProjektID", "Projektnamn", "Beskrivning", "Startdatum", "Slutdatum", "Kostnad", "Status", "Prioritet", "Projektchef", "Land"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProjekt);
        if (tblProjekt.getColumnModel().getColumnCount() > 0) {
            tblProjekt.getColumnModel().getColumn(0).setHeaderValue("ProjektID");
            tblProjekt.getColumnModel().getColumn(1).setHeaderValue("Projektnamn");
            tblProjekt.getColumnModel().getColumn(2).setHeaderValue("Beskrivning");
            tblProjekt.getColumnModel().getColumn(3).setHeaderValue("Startdatum");
            tblProjekt.getColumnModel().getColumn(4).setHeaderValue("Slutdatum");
            tblProjekt.getColumnModel().getColumn(5).setHeaderValue("Kostnad");
            tblProjekt.getColumnModel().getColumn(6).setHeaderValue("Status");
            tblProjekt.getColumnModel().getColumn(7).setHeaderValue("Prioritet");
            tblProjekt.getColumnModel().getColumn(8).setHeaderValue("Projektchef");
            tblProjekt.getColumnModel().getColumn(9).setHeaderValue("Land");
        }

        btnHämtaProjekt.setText("Hämta projekt");
        btnHämtaProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHämtaProjektActionPerformed(evt);
            }
        });

        btnÄndraProjekt.setText("Ändra projekt");
        btnÄndraProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnÄndraProjektActionPerformed(evt);
            }
        });

        btnTaBortProjekt.setText("Ta bort projekt");

        btnNyttProjekt.setText("Nytt projekt");
        btnNyttProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNyttProjektActionPerformed(evt);
            }
        });

        cmbAvdelningsVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAvdelningsValActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnHämtaProjekt)
                        .addGap(18, 18, 18)
                        .addComponent(btnÄndraProjekt)
                        .addGap(18, 18, 18)
                        .addComponent(btnTaBortProjekt)
                        .addGap(18, 18, 18)
                        .addComponent(btnNyttProjekt)
                        .addGap(18, 18, 18)
                        .addComponent(cmbAvdelningsVal, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 162, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHämtaProjekt)
                    .addComponent(btnÄndraProjekt)
                    .addComponent(btnTaBortProjekt)
                    .addComponent(btnNyttProjekt)
                    .addComponent(cmbAvdelningsVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fyllCmbAvdelningar()
    {
        String sqlfråga = "select namn from avdelning";
        ArrayList<String> allaAvdelningar;
        cmbAvdelningsVal.addItem("Sortera på avdelning");
        try {
            allaAvdelningar = idb.fetchColumn(sqlfråga);
            for (String avdelning : allaAvdelningar)
                cmbAvdelningsVal.addItem(avdelning);
        }
        catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }
    private void btnHämtaProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHämtaProjektActionPerformed
        hamtaProjekt();
    }//GEN-LAST:event_btnHämtaProjektActionPerformed

    private void btnNyttProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNyttProjektActionPerformed
        EditProjekt nyttProjekt = new EditProjekt(idb);
        nyttProjekt.setVisible(true);
    }//GEN-LAST:event_btnNyttProjektActionPerformed

    private void btnÄndraProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnÄndraProjektActionPerformed
        editProjekt();
    }//GEN-LAST:event_btnÄndraProjektActionPerformed

    private void cmbAvdelningsValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAvdelningsValActionPerformed
        ArrayList<HashMap<String, String>> soktaProjekt;

        try {
            String valdAvdelning = cmbAvdelningsVal.getSelectedItem().toString();
            String fraga = "Select * from projekt where pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning in (select avdid from avdelning where avdelning.namn = '" + valdAvdelning + "')))";
            soktaProjekt = idb.fetchRows(fraga);
            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.setRowCount(0);
            // Lägg till kolumnnamn i modellen
            tableModel.addColumn("ID");
            tableModel.addColumn("Projektnamn");
            tableModel.addColumn("Beskrivning");
            tableModel.addColumn("Startdatum");
            tableModel.addColumn("Slutdatum");
            tableModel.addColumn("Kostnad");
            tableModel.addColumn("Status");
            tableModel.addColumn("Prioritet");
            tableModel.addColumn("Projektchef");
            tableModel.addColumn("Land");
            for (HashMap<String, String> projekt : soktaProjekt) {
                tableModel.addRow(new Object[]{
                    projekt.get("pid"),
                    projekt.get("projektnamn"),
                    projekt.get("beskrivning"),
                    projekt.get("startdatum"),
                    projekt.get("slutdatum"),
                    projekt.get("kostnad"),
                    projekt.get("status"),
                    projekt.get("prioritet"),
                    projekt.get("projektchef"),
                    projekt.get("land")
                });
            }
            // Sätt modellen på JTable
            tblProjekt.setModel(tableModel);
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }//GEN-LAST:event_cmbAvdelningsValActionPerformed
    private void hamtaProjekt() {
        try {
            // SQL-frågan för att hämta data
            String query = "SELECT * FROM projekt";
            System.out.println("SQL-fråga: " + query); // Logga frågan Markera bort
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(query);

            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.setRowCount(0);

            // Lägg till kolumnnamn i modellen
            tableModel.addColumn("ID");
            tableModel.addColumn("Projektnamn");
            tableModel.addColumn("Beskrivning");
            tableModel.addColumn("Startdatum");
            tableModel.addColumn("Slutdatum");
            tableModel.addColumn("Kostnad");
            tableModel.addColumn("Status");
            tableModel.addColumn("Prioritet");
            tableModel.addColumn("Projektchef");
            tableModel.addColumn("Land");

            // Fyller table med data från databasen
            for (HashMap<String, String> rad : resultat) {
            tableModel.addRow(new Object[]{
                rad.get("pid"),
                rad.get("projektnamn"),
                rad.get("beskrivning"),
                rad.get("startdatum"),
                rad.get("slutdatum"),
                rad.get("kostnad"),
                rad.get("status"),
                rad.get("prioritet"),
                rad.get("projektchef"),
                rad.get("land")
            });
        }

        // Sätt modellen på JTable
        tblProjekt.setModel(tableModel);
    } catch (InfException e) {
        System.out.println(e.getMessage());
        JOptionPane.showMessageDialog(null, "Fel vid hämtning av anställda: ");
    }
    catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Annat fel");
    }
}
    private void editProjekt() {
        int selectedRow = tblProjekt.getSelectedRow();
        if (selectedRow != -1) {
            Object projekt = tblProjekt.getValueAt(selectedRow, 0); // Hämta värde från kolumn 0
            int queryPid = Integer.parseInt(projekt.toString()); // Konvertera till String
            new EditProjekt(idb, queryPid).setVisible(true); //öppnar nytt fönster, skickar med den projektets PID från databasen

            // JOptionPane.showMessageDialog(this, "Valt ID: " + projekt);
        } else {
            JOptionPane.showMessageDialog(null, "Ingen rad är markerad!");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHämtaProjekt;
    private javax.swing.JButton btnNyttProjekt;
    private javax.swing.JButton btnTaBortProjekt;
    private javax.swing.JButton btnÄndraProjekt;
    private javax.swing.JComboBox<String> cmbAvdelningsVal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProjekt;
    // End of variables declaration//GEN-END:variables

    private void setLocationRelativeTo(Object object) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
