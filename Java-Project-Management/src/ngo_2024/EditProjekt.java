/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo_2024;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Märta Sjöblom
 */
public class EditProjekt extends javax.swing.JFrame {

    private InfDB idb;
    private boolean nyttProjekt;
    private boolean admin;  //Ska användas för att kunna ändra projektchef, bara för admin, just nu kan alla
    private SimpleDateFormat datumformat;
    private LandMeny land;

    /**
     * För att skapa nya projekt, vilket bara admin kan, därav den parametervariabeln
     * @param idb
     * @param admin
     */
    public EditProjekt(InfDB idb, boolean admin) {
        this.idb = idb;
        this.datumformat = new SimpleDateFormat("yyyy-MM-dd");
        nyttProjekt = true;
        this.admin = admin; 
        this.land = new LandMeny(idb);
        initComponents();
        fyllCmbStatus();    //Fyller Status-comboboxen
        fyllCmbPrioritet(); //Fyller Prioritet-comboboxen
        fyllCmbProjektChef();   //Fyller ProjektChef-comboboxen med namn
        fyllCmbLand();  //Fyller Land-comboboxen med namn
        lblProjektID.setVisible(false);
        txtProjektID.setVisible(false);
        btnHandlaggare.setVisible(false);
        btnPartners.setVisible(false);
        sprStreck.setVisible(false);
        this.setTitle("Nytt projekt");
        btnRensaFalt.setText("Rensa");
        setLocationRelativeTo(null);    //Sätter rutan mitt i skärmen
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  //Stänger fönstret men inte programmet vid kryssad ruta
    }

    /**
     * Konstruktor för att editera redan existerande projekt, med projektID som
     * parameter. Kan användas av projektchef, alltså kan inte fältet projektchef ändras
     *
     * @param idb
     * @param pid
     */
    public EditProjekt(InfDB idb, int pid) {
        this.idb = idb;
        this.datumformat = new SimpleDateFormat("yyyy-MM-dd");
        this.land = new LandMeny(idb);
        initComponents();
        setLocationRelativeTo(null);    //Sätter rutan mitt i skärmen
        fyllCmbStatus();    //Fyller Status-comboboxen
        fyllCmbPrioritet(); //Fyller Prioritet-comboboxen
        fyllCmbProjektChef();   //Fyller ProjektChef-comboboxen med namn
        fyllCmbLand();  //Fyller Land-comboboxen med namn
        lblHandlaggare.setVisible(false);
        lblPartners.setVisible(false);
        txtProjektID.setText("" + pid);   //Sätter projekt-id i rutan vid redigering av projekt
        editProjekt(txtProjektID);  //Redigerar projekt utifrån projektID
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  //Stänger fönstret men inte programmet vid kryssad ruta
    }
    
    /**
     * Konstruktor för Admin för att editera redan existerande projekt, med projektID som
     * projektID som parameter. Projektchef kan alltså redigeras. 
     *
     * @param idb
     * @param pid
     * @param admin
     */
    public EditProjekt(InfDB idb, int pid, boolean admin) {
        this.idb = idb;
        this.admin = admin;
        this.datumformat = new SimpleDateFormat("yyyy-MM-dd");
        this.land = new LandMeny(idb);
        initComponents();
        setLocationRelativeTo(null);    //Sätter rutan mitt i skärmen
        fyllCmbStatus();    //Fyller Status-comboboxen
        fyllCmbPrioritet(); //Fyller Prioritet-comboboxen
        fyllCmbProjektChef();   //Fyller ProjektChef-comboboxen med namn
        fyllCmbLand();  //Fyller Land-comboboxen med namn
        lblHandlaggare.setVisible(false);
        lblPartners.setVisible(false);
        txtProjektID.setText("" + pid);   //Sätter projekt-id i rutan vid redigering av projekt
        editProjekt(txtProjektID);  //Redigerar projekt utifrån projektID
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  //Stänger fönstret men inte programmet vid kryssad ruta
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateStartdatumSok = new com.toedter.calendar.JDateChooser();
        jDateSlutdatumSok = new com.toedter.calendar.JDateChooser();
        txtProjektNamn = new javax.swing.JTextField();
        lblProjektNamn = new javax.swing.JLabel();
        lblBeskrivning = new javax.swing.JLabel();
        txtBeskrivning = new javax.swing.JTextField();
        lblStartDatum = new javax.swing.JLabel();
        lblSlutDatum = new javax.swing.JLabel();
        lblKostnad = new javax.swing.JLabel();
        txtKostnad = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        lblPrioritet = new javax.swing.JLabel();
        cmbPrioritet = new javax.swing.JComboBox<>();
        lblProjektChef = new javax.swing.JLabel();
        cmbProjektChef = new javax.swing.JComboBox<>();
        cmbStatus = new javax.swing.JComboBox<>();
        lblLand = new javax.swing.JLabel();
        cmbLand = new javax.swing.JComboBox<>();
        btnSpara = new javax.swing.JButton();
        lblProjektID = new javax.swing.JLabel();
        txtProjektID = new javax.swing.JTextField();
        sprStreck = new javax.swing.JSeparator();
        btnRensaFalt = new javax.swing.JButton();
        btnHandlaggare = new javax.swing.JButton();
        lblHandlaggare = new javax.swing.JLabel();
        jDateStartdatum = new com.toedter.calendar.JDateChooser();
        jDateSlutdatum = new com.toedter.calendar.JDateChooser();
        btnAvbryt = new javax.swing.JButton();
        btnPartners = new javax.swing.JButton();
        lblPartners = new javax.swing.JLabel();

        jDateStartdatumSok.setDateFormatString("yyyy-MM-dd");

        jDateSlutdatumSok.setDateFormatString("yyyy-MM-dd");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Redigera projekt");

        lblProjektNamn.setText("Projektnamn");

        lblBeskrivning.setText("Beskrivning");

        txtBeskrivning.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        lblStartDatum.setText("Startdatum");

        lblSlutDatum.setText("Slutdatum");

        lblKostnad.setText("Kostnad");

        lblStatus.setText("Status");

        lblPrioritet.setText("Prioritet");

        lblProjektChef.setText("Projektchef");

        lblLand.setText("Land");

        btnSpara.setText("Spara");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        lblProjektID.setText("ProjektID");

        txtProjektID.setEnabled(false);
        txtProjektID.setRequestFocusEnabled(false);

        btnRensaFalt.setText("Återställ");
        btnRensaFalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRensaFaltActionPerformed(evt);
            }
        });

        btnHandlaggare.setText("Hantera deltagande handläggare");
        btnHandlaggare.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        btnHandlaggare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHandlaggareActionPerformed(evt);
            }
        });

        lblHandlaggare.setText("Handläggare läggs till separat via redigering");
        lblHandlaggare.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jDateStartdatum.setDateFormatString("yyyy-MM-dd");

        jDateSlutdatum.setDateFormatString("yyyy-MM-dd");

        btnAvbryt.setText("Avbryt");
        btnAvbryt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvbrytActionPerformed(evt);
            }
        });

        btnPartners.setText("Hantera deltagande partners");
        btnPartners.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        btnPartners.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPartnersActionPerformed(evt);
            }
        });

        lblPartners.setText("Partner läggs till separat via redigering");
        lblPartners.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sprStreck)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBeskrivning)
                        .addGap(18, 18, 18)
                        .addComponent(txtBeskrivning))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPrioritet)
                            .addComponent(lblKostnad)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStatus)
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtKostnad, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cmbLand, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbPrioritet, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProjektNamn)
                                    .addComponent(lblProjektID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtProjektID, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtProjektNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStartDatum)
                                .addGap(18, 18, 18)
                                .addComponent(jDateStartdatum, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSlutDatum)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateSlutdatum, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLand)
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblProjektChef)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbProjektChef, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnHandlaggare)
                                    .addComponent(lblHandlaggare)
                                    .addComponent(btnPartners)
                                    .addComponent(lblPartners)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnRensaFalt)
                                        .addGap(117, 117, 117)
                                        .addComponent(btnAvbryt)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSpara)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProjektID)
                    .addComponent(txtProjektID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sprStreck, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProjektNamn)
                    .addComponent(txtProjektNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBeskrivning)
                    .addComponent(txtBeskrivning, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblStartDatum)
                        .addComponent(lblSlutDatum))
                    .addComponent(jDateStartdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateSlutdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKostnad)
                    .addComponent(txtKostnad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrioritet)
                    .addComponent(cmbPrioritet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbLand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProjektChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProjektChef))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHandlaggare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPartners)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHandlaggare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPartners)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRensaFalt)
                    .addComponent(btnAvbryt)
                    .addComponent(btnSpara))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        lblProjektNamn.getAccessibleContext().setAccessibleName("lblProjektNamn");
        lblBeskrivning.getAccessibleContext().setAccessibleName("lblBeskrivning");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fyllCmbStatus() {
        cmbStatus.addItem("");
        cmbStatus.addItem("Avslutat");
        cmbStatus.addItem("Planerat");
        cmbStatus.addItem("Pågående");
        
        //Om hämta från databasen, blir problem med null och felaktiga tecken
//        String sqlfråga = "select distinct status from projekt;";
//        ArrayList<String> allaStatus;
//        cmbStatus.addItem("");
//        try {
//            allaStatus = idb.fetchColumn(sqlfråga);
//            for (String status : allaStatus) {
//                cmbStatus.addItem(status);
//            }
//        } catch (InfException e) {
//            System.out.println(e.getMessage());
//            JOptionPane.showMessageDialog(null, "Databasfel");
//        }

    }

    private void fyllCmbPrioritet() {
        cmbPrioritet.addItem("");
        cmbPrioritet.addItem("Hög");
        cmbPrioritet.addItem("Medel");
        cmbPrioritet.addItem("Låg");
        
        //Fyller från databasen, blir problem med null och felaktiga tecken
//        String sqlfråga = "select distinct prioritet from projekt;";
//        ArrayList<String> allaPrioritet;
//        cmbPrioritet.addItem("");
//        try {
//            allaPrioritet = idb.fetchColumn(sqlfråga);
//            for (String prioritet : allaPrioritet) {
//                cmbPrioritet.addItem(prioritet);
//            }
//        } catch (InfException e) {
//            System.out.println(e.getMessage());
//            JOptionPane.showMessageDialog(null, "Databasfel");
//        }
    }

    private void fyllCmbProjektChef() {
        
        String query = "SELECT CONCAT(fornamn, ' ', efternamn) as namn FROM anstalld, handlaggare where anstalld.aid = handlaggare.aid";
        cmbProjektChef.addItem("");
        try {
            ArrayList<String> allaNamn = idb.fetchColumn(query);
            for (int i = 0; i < allaNamn.size(); i++) {
                cmbProjektChef.addItem(allaNamn.get(i));
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Något gick fel när chef-data skulle hämtas från databasen. Kontrollera att databasen fungerar som den ska.");
        }
    }

    private void fyllCmbLand() {
        ArrayList<String> allaLander = land.getAllaLandNamn();
        cmbLand.addItem("");
        for (String ettLand : allaLander) {
            cmbLand.addItem(ettLand);
        }
    }

    public void editProjekt(JTextField projektID) {
        int pid = 0;
        if (Validering.faltEjTomtKontroll(projektID) && Validering.arHeltal(projektID)) {
            try {
                pid = Integer.parseInt(projektID.getText());
            } catch (NumberFormatException ex) {
                System.out.println("Saknas värde i pid");
            }
            try {
                String query = "SELECT projektnamn, beskrivning, startdatum, slutdatum, kostnad, status, prioritet, projektchef, land FROM projekt WHERE pid = " + pid;
                HashMap<String, String> resultat = idb.fetchRow(query); // Hämta rad som en HashMap

                // Hämta och sätt värden i motsvarande textfält
                nyttProjekt = false;
                txtProjektNamn.setText(resultat.get("projektnamn"));          // Projektnamn
                txtBeskrivning.setText(resultat.get("beskrivning"));        // Beskrivning
                jDateStartdatum.setDate(datumformat.parse(resultat.get("startdatum")));           // Startdatum
                jDateSlutdatum.setDate(datumformat.parse(resultat.get("slutdatum")));            // Slutdatum
                txtKostnad.setText(resultat.get("kostnad"));            // kostnad
                if (admin) {
                    String sqlFornamn = "select fornamn from anstalld where aid = " + resultat.get("projektchef");
                    String sqlEfternamn = "select efternamn from anstalld where aid = " + resultat.get("projektchef");
                    String fulltNamn = "";
                    try {
                        String fornamn = idb.fetchSingle(sqlFornamn);
                        String efternamn = idb.fetchSingle(sqlEfternamn);
                        fulltNamn = fornamn + " " + efternamn;
                    } catch (InfException e) {
                        JOptionPane.showMessageDialog(this, "Det gick inte att hämta ut namndata från databasen. Kontrollera att databasen fungerar som den ska.");
                    }
                    cmbProjektChef.setSelectedItem(fulltNamn);                  //Projektchef
                } else {
                    lblProjektChef.setVisible(false);
                    cmbProjektChef.setVisible(false); //Visar inte ProjektChef om det inte är admin som redigerar
                }
                String landNamn = land.getLandNamnFranId(resultat.get("land"));
                cmbLand.setSelectedItem(landNamn);
                cmbStatus.setSelectedItem(resultat.get("status"));          //Status         
                cmbPrioritet.setSelectedItem(resultat.get("prioritet")); // Prioritet

            } catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Något gick fel när projektdata skulle hämtas ur databasen.");
                txtProjektID.requestFocus();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Datum är inte korrekt angivna.");
            }
        }
    }

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        int nyttPid = 0;
        String projektNamn = null;
        String beskrivning = null;
        double kostnad = 0;
        String status = null;
        String prioritet = null;
        int projektChef = 0;
        int lid = 0;

        String startDatum = "";
        String slutDatum = "";
        SimpleDateFormat datumformat = new SimpleDateFormat("yyyy-MM-dd");  //Det format vi vill spara datumen till databasen
        try {   //Försöker hämta datumen från datepicker och göra om till formatet ovan
            startDatum = datumformat.format(jDateStartdatum.getDate());
            slutDatum = datumformat.format(jDateSlutdatum.getDate());
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Se över dina sökparametrar en gång till. Du måste ange ett datum i båda datumfälten och Startdatum måste komma före Slutdatum.");
        }

        // Lägg till korrekt input från fälten som kan läggas till databasen
        if (Validering.faltEjTomtKontroll(txtProjektNamn)
                && Validering.faltEjTomtKontroll(txtBeskrivning)
                && Validering.datumKontroll(startDatum)
                && Validering.datumKontroll(slutDatum)
                && Validering.datumEfterKontroll(startDatum, slutDatum)
                && Validering.datumForeKontroll(slutDatum, startDatum)
                && Validering.faltEjTomtKontroll(txtKostnad)
                && Validering.arDecimal(txtKostnad)
                && Validering.positivtVarde(txtKostnad)
                && cmbStatus.getSelectedIndex() != 0
                && cmbPrioritet.getSelectedIndex() != 0
                && cmbLand.getSelectedIndex() != 0) 
        {
            projektNamn = txtProjektNamn.getText();
            beskrivning = txtBeskrivning.getText();
            kostnad = Double.parseDouble(txtKostnad.getText());
            status = cmbStatus.getSelectedItem().toString();
            prioritet = cmbPrioritet.getSelectedItem().toString();

            //Hämta aid för projektchef utifrån fulla namnet i comboboxen
            if (admin) {
                if (cmbProjektChef.getSelectedIndex() != 0) {
                    System.out.println(cmbProjektChef.getSelectedItem().toString());
                    String[] namn = cmbProjektChef.getSelectedItem().toString().split(" ");
                    System.out.println(namn);
                    String sqlFornamn = namn[0];
                    String sqlEfternamn = namn[1];
                    String sqlAid = "select aid from anstalld where fornamn = '" + sqlFornamn + "' and efternamn = '" + sqlEfternamn + "'";
                    try {
                        projektChef = Integer.parseInt(idb.fetchSingle(sqlAid));
                    } catch (InfException e) {
                        JOptionPane.showMessageDialog(this, "Kunde inte hämta uppgifter om chef.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Vänligen välj en projektchef.");
                }
            }
            //Hämta Lid för land utifrån namnet i comboboxen
            String sqlLand = cmbLand.getSelectedItem().toString();
            lid = land.getLidFranNamn(sqlLand);

            if (nyttProjekt) {
                try {
                    nyttPid = Integer.parseInt(idb.getAutoIncrement("projekt", "pid")); //skapar nytt PID från databasens sista värde
                } catch (InfException e) {
                    JOptionPane.showMessageDialog(this, "Kunde inte hämta nästa ID-nummer för projekt.");
                }
                String nyFraga = "insert into projekt values (" + nyttPid + ", '" + projektNamn + "', '" + beskrivning + "', '" + startDatum
                        + "', '" + slutDatum + "', " + kostnad + ", '" + status + "', '" + prioritet + "', " + projektChef + ", " + lid + ")";
                try {
                    idb.insert(nyFraga);
                    JOptionPane.showMessageDialog(this, "Projektet har lagts till!");
                    dispose(); //Stänger fönstret efter projektet lagts till
                } catch (InfException e) {
                    JOptionPane.showMessageDialog(this, "Kunde inte lägga till projekt");
                }
            } else {
                String uppdateraFraga;
                if (admin) {    //Om admin, kan se, ändra och lägga till projektchef
                    uppdateraFraga = "update projekt set projektnamn = '" + projektNamn + "', beskrivning = '" + beskrivning
                            + "', startdatum = '" + startDatum + "', slutdatum = '" + slutDatum + "', kostnad = " + kostnad
                            + ", status = '" + status + "', prioritet = '" + prioritet + "', projektchef = " + projektChef
                            + ", land = " + lid + " where pid = " + Integer.valueOf(txtProjektID.getText());
                } else {    //Om bara projektchef redigerar projektet kan inte val av projektchef göras
                    uppdateraFraga = "update projekt set projektnamn = '" + projektNamn + "', beskrivning = '" + beskrivning
                            + "', startdatum = '" + startDatum + "', slutdatum = '" + slutDatum + "', kostnad = " + kostnad
                            + ", status = '" + status + "', prioritet = '" + prioritet + "', land = " + lid + " where pid = " + txtProjektID.getText();
                }
                try {
                    idb.update(uppdateraFraga);
                    JOptionPane.showMessageDialog(null, "Projektet har uppdaterats!");
                    dispose(); //Stänger fönstret efter projektet uppdaterats
                } catch (InfException e) {
                    JOptionPane.showMessageDialog(null, "Kunde inte uppdatera projekt. Något gick fel när data skulle sparas i databasen.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "En eller flera fält är inte ifyllt.\nVar vänlig fyll i alla fälten");
        }
    }//GEN-LAST:event_btnSparaActionPerformed

    private void btnRensaFaltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRensaFaltActionPerformed
        boolean validering = txtProjektID.getText().isBlank();  //Kontrollerar om det är nytt eller existerande projekt som redigeras
        if (validering) {   //Om nytt projekt, rensa allt
            txtProjektNamn.setText("");
            txtBeskrivning.setText("");
            jDateStartdatum.setDate(null);
            jDateSlutdatum.setDate(null);
            txtKostnad.setText("");
            cmbStatus.setSelectedIndex(0);
            cmbPrioritet.setSelectedIndex(0);
            cmbProjektChef.setSelectedIndex(0);
            cmbLand.setSelectedIndex(0);
        } else {    //Om existerande projekt, hämta info igen från databasen
            editProjekt(txtProjektID);
        }
    }//GEN-LAST:event_btnRensaFaltActionPerformed

    private void btnHandlaggareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHandlaggareActionPerformed
        int pid = Integer.parseInt(txtProjektID.getText());
        new HandläggareProjektMeny(idb, pid).setVisible(true);
    }//GEN-LAST:event_btnHandlaggareActionPerformed

    private void btnAvbrytActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvbrytActionPerformed
        dispose();
    }//GEN-LAST:event_btnAvbrytActionPerformed

    private void btnPartnersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPartnersActionPerformed
        String pid = txtProjektID.getText();
        new EditProjektPartner(idb, pid, true).setVisible(true);
    }//GEN-LAST:event_btnPartnersActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvbryt;
    private javax.swing.JButton btnHandlaggare;
    private javax.swing.JButton btnPartners;
    private javax.swing.JButton btnRensaFalt;
    private javax.swing.JButton btnSpara;
    private javax.swing.JComboBox<String> cmbLand;
    private javax.swing.JComboBox<String> cmbPrioritet;
    private javax.swing.JComboBox<String> cmbProjektChef;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser jDateSlutdatum;
    private com.toedter.calendar.JDateChooser jDateSlutdatumSok;
    private com.toedter.calendar.JDateChooser jDateStartdatum;
    private com.toedter.calendar.JDateChooser jDateStartdatumSok;
    private javax.swing.JLabel lblBeskrivning;
    private javax.swing.JLabel lblHandlaggare;
    private javax.swing.JLabel lblKostnad;
    private javax.swing.JLabel lblLand;
    private javax.swing.JLabel lblPartners;
    private javax.swing.JLabel lblPrioritet;
    private javax.swing.JLabel lblProjektChef;
    private javax.swing.JLabel lblProjektID;
    private javax.swing.JLabel lblProjektNamn;
    private javax.swing.JLabel lblSlutDatum;
    private javax.swing.JLabel lblStartDatum;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JSeparator sprStreck;
    private javax.swing.JTextField txtBeskrivning;
    private javax.swing.JTextField txtKostnad;
    private javax.swing.JTextField txtProjektID;
    private javax.swing.JTextField txtProjektNamn;
    // End of variables declaration//GEN-END:variables
}
