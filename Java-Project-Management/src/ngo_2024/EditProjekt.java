/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo_2024;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Märta Sjöblom
 */
public class EditProjekt extends javax.swing.JFrame {

    private InfDB idb;
    private boolean nyttProjekt;
    private boolean admin;  //Ska användas för att kunna ändra projektchef, bara för admin, just nu kan alla

    /**
     * För att skapa nya projekt, bara admin som kan?
     */
    public EditProjekt(InfDB idb, boolean admin) {
        this.idb = idb;
        nyttProjekt = true;
        this.admin = admin; 
        initComponents();
        fyllCmbStatus();    //Fyller Status-comboboxen
        fyllCmbPrioritet(); //Fyller Prioritet-comboboxen
        fyllCmbProjektChef();   //Fyller ProjektChef-comboboxen med namn
        fyllCmbLand();  //Fyller Land-comboboxen med namn
        lblProjektID.setVisible(false);
        txtProjektID.setVisible(false);
        btnSökPID.setVisible(false);
        this.setTitle("Nytt projekt");
        setLocationRelativeTo(null);    //Sätter rutan mitt i skärmen
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  //Stänger fönstret men inte programmet vid kryssad ruta
    }

    /**
     * Konstruktor för att editera redan existerande projekt, med projektID som
     * parameter. Kan användas av projektchef, alltså kan inte projektchef ändras
     *
     * @param idb
     * @param pid
     */
    public EditProjekt(InfDB idb, int pid) {
        this.idb = idb;
        initComponents();
        setLocationRelativeTo(null);    //Sätter rutan mitt i skärmen
        fyllCmbStatus();    //Fyller Status-comboboxen
        fyllCmbPrioritet(); //Fyller Prioritet-comboboxen
        fyllCmbProjektChef();   //Fyller ProjektChef-comboboxen med namn
        fyllCmbLand();  //Fyller Land-comboboxen med namn
        txtProjektID.setText("" + pid);   //Sätter projekt-id i rutan vid redigering av projekt
        editProjekt(txtProjektID);  //Redigerar projekt utifrån projektID
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  //Stänger fönstret men inte programmet vid kryssad ruta
    }
    
    /**
     * Konstruktor för Admin för att editera redan existerande projekt, med projektID som
     * projektID som parameter. Projektchef kan alltså redigeras. 
     *
     * @param idb
     * @param pid
     */
    public EditProjekt(InfDB idb, int pid, boolean admin) {
        this.idb = idb;
        this.admin = admin;
        initComponents();
        setLocationRelativeTo(null);    //Sätter rutan mitt i skärmen
        fyllCmbStatus();    //Fyller Status-comboboxen
        fyllCmbPrioritet(); //Fyller Prioritet-comboboxen
        fyllCmbProjektChef();   //Fyller ProjektChef-comboboxen med namn
        fyllCmbLand();  //Fyller Land-comboboxen med namn
        txtProjektID.setText("" + pid);   //Sätter projekt-id i rutan vid redigering av projekt
        editProjekt(txtProjektID);  //Redigerar projekt utifrån projektID
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  //Stänger fönstret men inte programmet vid kryssad ruta
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtProjektNamn = new javax.swing.JTextField();
        lblProjektNamn = new javax.swing.JLabel();
        lblBeskrivning = new javax.swing.JLabel();
        txtBeskrivning = new javax.swing.JTextField();
        lblStartDatum = new javax.swing.JLabel();
        txtStartDatum = new javax.swing.JTextField();
        lblSlutDatum = new javax.swing.JLabel();
        txtSlutDatum = new javax.swing.JTextField();
        lblKostnad = new javax.swing.JLabel();
        txtKostnad = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        lblPrioritet = new javax.swing.JLabel();
        cmbPrioritet = new javax.swing.JComboBox<>();
        lblProjektChef = new javax.swing.JLabel();
        cmbProjektChef = new javax.swing.JComboBox<>();
        cmbStatus = new javax.swing.JComboBox<>();
        lblLand = new javax.swing.JLabel();
        cmbLand = new javax.swing.JComboBox<>();
        btnSpara = new javax.swing.JButton();
        lblProjektID = new javax.swing.JLabel();
        txtProjektID = new javax.swing.JTextField();
        btnSökPID = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnRensaFält = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Redigera projekt");

        lblProjektNamn.setText("Projektnamn");

        lblBeskrivning.setText("Beskrivning");

        txtBeskrivning.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        lblStartDatum.setText("Startdatum");

        lblSlutDatum.setText("Slutdatum");

        lblKostnad.setText("Kostnad");

        lblStatus.setText("Status");

        lblPrioritet.setText("Prioritet");

        cmbPrioritet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPrioritetActionPerformed(evt);
            }
        });

        lblProjektChef.setText("Projektchef");

        cmbProjektChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProjektChefActionPerformed(evt);
            }
        });

        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        lblLand.setText("Land");

        cmbLand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLandActionPerformed(evt);
            }
        });

        btnSpara.setText("Spara");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        lblProjektID.setText("ProjektID");

        btnSökPID.setText("Sök projekt");
        btnSökPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSökPIDActionPerformed(evt);
            }
        });

        btnRensaFält.setText("Återställ");
        btnRensaFält.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRensaFältActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBeskrivning)
                        .addGap(18, 18, 18)
                        .addComponent(txtBeskrivning))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLand)
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblProjektChef)
                                .addGap(18, 18, 18)))
                        .addComponent(cmbProjektChef, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPrioritet)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStartDatum)
                                .addGap(20, 20, 20)
                                .addComponent(txtStartDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblSlutDatum)
                                .addGap(18, 18, 18)
                                .addComponent(txtSlutDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblKostnad)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStatus)
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtKostnad, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(btnRensaFält)))
                                        .addGap(53, 53, 53)
                                        .addComponent(btnSpara))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cmbLand, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbPrioritet, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProjektNamn)
                                    .addComponent(lblProjektID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtProjektID, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSökPID))
                                    .addComponent(txtProjektNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(26, 26, 26)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProjektID)
                    .addComponent(txtProjektID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSökPID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProjektNamn)
                    .addComponent(txtProjektNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBeskrivning)
                    .addComponent(txtBeskrivning, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartDatum)
                    .addComponent(txtStartDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSlutDatum)
                    .addComponent(txtSlutDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKostnad)
                    .addComponent(txtKostnad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrioritet)
                    .addComponent(cmbPrioritet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbLand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProjektChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProjektChef))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSpara)
                    .addComponent(btnRensaFält))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        lblProjektNamn.getAccessibleContext().setAccessibleName("lblProjektNamn");
        lblBeskrivning.getAccessibleContext().setAccessibleName("lblBeskrivning");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fyllCmbStatus() {
        String sqlfråga = "select distinct status from projekt;";
        ArrayList<String> allaStatus;
        cmbStatus.addItem("");
        try {
            allaStatus = idb.fetchColumn(sqlfråga);
            for (String status : allaStatus) {
                cmbStatus.addItem(status);
            }
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }

    }

    private void fyllCmbPrioritet() {
        String sqlfråga = "select distinct prioritet from projekt;";
        ArrayList<String> allaPrioritet;
        cmbPrioritet.addItem("");
        try {
            allaPrioritet = idb.fetchColumn(sqlfråga);
            for (String prioritet : allaPrioritet) {
                cmbPrioritet.addItem(prioritet);
            }
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }

    private void fyllCmbProjektChef() {
        String sqlFörnamn = "select fornamn from anstalld, handlaggare where anstalld.aid = handlaggare.aid;";
        String sqlEfternamn = "select efternamn from anstalld, handlaggare where anstalld.aid = handlaggare.aid;";
        ArrayList<String> allaFörnamn;
        ArrayList<String> allaEfternamn;
        cmbProjektChef.addItem("");
        try {
            allaFörnamn = idb.fetchColumn(sqlFörnamn);
            allaEfternamn = idb.fetchColumn(sqlEfternamn);
            for (int i = 0; i < allaFörnamn.size(); i++) {
                String fulltNamn = allaFörnamn.get(i) + " " + allaEfternamn.get(i);
                cmbProjektChef.addItem(fulltNamn);
            }
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }

    private void fyllCmbLand() {
        String sqlfråga = "select distinct namn from land;";
        ArrayList<String> allaLänder;
        cmbLand.addItem("");
        try {
            allaLänder = idb.fetchColumn(sqlfråga);
            for (String land : allaLänder) {
                cmbLand.addItem(land);
            }
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }

    public void editProjekt(JTextField projektID) {
        int pid = 0;
        try {   //Byt ut mot validering
            pid = Integer.parseInt(projektID.getText());
        } catch (NumberFormatException ex) {
            System.out.println("Saknas värde i pid");
        }
        try {
            String query = "SELECT projektnamn, beskrivning, startdatum, slutdatum, kostnad, status, prioritet, projektchef, land FROM projekt WHERE pid = " + pid;
            HashMap<String, String> resultat = idb.fetchRow(query); // Hämta rad som en HashMap

            // Hämta och sätt värden i motsvarande textfält
            nyttProjekt = false;
            txtProjektNamn.setText(resultat.get("projektnamn"));          // Projektnamn
            txtBeskrivning.setText(resultat.get("beskrivning"));        // Beskrivning
            txtStartDatum.setText(resultat.get("startdatum"));           // Startdatum
            txtSlutDatum.setText(resultat.get("slutdatum"));            // Slutdatum
            txtKostnad.setText(resultat.get("kostnad"));            // kostnad
            if (admin) {
                String sqlFörnamn = "select fornamn from anstalld where aid = " + resultat.get("projektchef");
                String sqlEfternamn = "select efternamn from anstalld where aid = " + resultat.get("projektchef");
                String fulltNamn = "";
                try {
                    String förnamn = idb.fetchSingle(sqlFörnamn);
                    String efternamn = idb.fetchSingle(sqlEfternamn);
                    fulltNamn = förnamn + " " + efternamn;
                } catch (InfException e) {
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(null, "Databasfel");
                }
                cmbProjektChef.setSelectedItem(fulltNamn);                  //Projektchef
            } else {
                lblProjektChef.setVisible(false);
                cmbProjektChef.setVisible(false); //Visar inte ProjektChef om det inte är admin som redigerar
            }
            String sqlLand = "select namn from land where lid = " + resultat.get("land");
            String land = "";
            try {
                land = idb.fetchSingle(sqlLand);
            } catch (InfException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Databasfel");
            }
            cmbLand.setSelectedItem(land);
            cmbStatus.setSelectedItem(resultat.get("status"));          //Status         
            cmbPrioritet.setSelectedItem(resultat.get("prioritet")); // Prioritet

        } catch (InfException e) {
            System.out.println("Ett fel inträffade: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
            txtProjektID.requestFocus();
        } catch (Exception ex) {
            System.out.println("Annat fel" + ex.getMessage());
            JOptionPane.showMessageDialog(null, "Annat fel");
        }
    }

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        //Ersätt med vad som händer när de väljer
        String status = cmbStatus.getSelectedItem().toString();
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void cmbPrioritetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPrioritetActionPerformed
        //Ersätt med vad som händer när de väljer
        String prioritet = cmbPrioritet.getSelectedItem().toString();
    }//GEN-LAST:event_cmbPrioritetActionPerformed

    private void cmbLandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLandActionPerformed
        // Ersätt med vad som händer när de väljer
        String land = cmbPrioritet.getSelectedItem().toString();
    }//GEN-LAST:event_cmbLandActionPerformed

    private void cmbProjektChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProjektChefActionPerformed
        // Ersätt med vad som händer vid val här
        String projektChef = cmbProjektChef.getSelectedItem().toString();
    }//GEN-LAST:event_cmbProjektChefActionPerformed

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        // Lägg till korrekt input från fälten som kan läggas till databasen
        if (Validering.faltEjTomtKontroll(txtProjektNamn)
                && Validering.faltEjTomtKontroll(txtBeskrivning)
                && Validering.faltEjTomtKontroll(txtStartDatum)
                && Validering.faltEjTomtKontroll(txtSlutDatum)
                && Validering.faltEjTomtKontroll(txtKostnad)
                && //Hur felmeddela och popupa alla nedan valideringar vid ett spara-knapptryck?
                Validering.datumKontroll(txtStartDatum)
                && Validering.datumKontroll(txtSlutDatum)
                && Validering.datumEfterKontroll(txtStartDatum.getText(), txtSlutDatum)
                && Validering.datumFöreKontroll(txtSlutDatum.getText(), txtStartDatum)
                && Validering.arDecimal(txtKostnad)
                && Validering.positivtVarde(txtKostnad)) {

            String projektnamn = txtProjektNamn.getText();
            String beskrivning = txtBeskrivning.getText();
            String startdatum = txtStartDatum.getText();
            String slutdatum = txtSlutDatum.getText();
            String status = cmbStatus.getSelectedItem().toString();
            String prioritet = cmbPrioritet.getSelectedItem().toString();
            double kostnad = Double.parseDouble(txtKostnad.getText());
            Anstalld nyAnstalld = new Anstalld(idb);
            int projektchef = nyAnstalld.aidFrånFulltNamn(cmbProjektChef.getSelectedItem().toString());
            int land = 0;
            try {
                String sqlLand = "select lid from land where namn = '" + cmbLand.getSelectedItem().toString() + "'";
                land = Integer.parseInt(idb.fetchSingle(sqlLand));
            } catch (InfException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Kunde inte hitta land");
            }
            if (nyttProjekt) {
                String sqlFråga = "insert into projekt (projektnamn, beskrivning, startdatum, slutdatum, kostnad, status, prioritet, projektchef, land) values ('" + projektnamn
                        + "', '" + beskrivning + "', '" + startdatum + "', '" + slutdatum + "', " + kostnad + ", '" + status + "', '" + prioritet + "', " + projektchef + ", " + land + ")";
                System.out.println(sqlFråga);
                try {
                    idb.insert(sqlFråga);
                    JOptionPane.showMessageDialog(null, "Projektet har lagts till!");
                    dispose(); //Stänger fönstret efter projektet lagts till
                } catch (InfException e) {
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(null, "Kunde inte lägga till projekt");
                }
            } else {
                String sqlFråga;
                if (admin) {
                    sqlFråga = "update projekt set (projektnamn = '" + projektnamn + "', beskrivning = '" + beskrivning + "', startdatum = '" + startdatum + "', slutdatum = '" + slutdatum
                            + "', kostnad = " + kostnad + ", status = '" + status + "', prioritet = '" + prioritet + "', projektchef = " + projektchef + ", land = " + land + ") where pid = " + Integer.valueOf(txtProjektID.getText());
                    System.out.println(sqlFråga);
                } else {
                    sqlFråga = "update projekt set (projektnamn = '" + projektnamn + "', beskrivning = '" + beskrivning + "', startdatum = '" + startdatum + "', slutdatum = '" + slutdatum
                            + "', kostnad = " + kostnad + ", status = '" + status + "', prioritet = '" + prioritet + "', land = " + land + ") where pid = " + Integer.valueOf(txtProjektID.getText());
                    System.out.println(sqlFråga);
                }
                try {
                    idb.update(sqlFråga);
                    JOptionPane.showMessageDialog(null, "Projektet har uppdaterats!");
                    dispose(); //Stänger fönstret efter projektet uppdaterats
                } catch (InfException e) {
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(null, "Kunde inte uppdatera projekt");
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Fel vid inmatning");
        }
    }//GEN-LAST:event_btnSparaActionPerformed

    private void btnSökPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSökPIDActionPerformed
        boolean validering = Validering.faltEjTomtKontroll(txtProjektID);
        if (!validering) {
            txtProjektID.requestFocus();
        } else {
            editProjekt(txtProjektID);
        }
    }//GEN-LAST:event_btnSökPIDActionPerformed

    private void btnRensaFältActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRensaFältActionPerformed
        // TODO add your handling code here:
        boolean validering = txtProjektID.getText().isBlank();
        if (validering) {
            txtProjektNamn.setText("");
            txtBeskrivning.setText("");
            txtStartDatum.setText("");
            txtSlutDatum.setText("");
            txtKostnad.setText("");
            cmbStatus.setSelectedIndex(0);
            cmbPrioritet.setSelectedIndex(0);
            cmbProjektChef.setSelectedIndex(0);
            cmbLand.setSelectedIndex(0);
        } else {
            editProjekt(txtProjektID);
        }
    }//GEN-LAST:event_btnRensaFältActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRensaFält;
    private javax.swing.JButton btnSpara;
    private javax.swing.JButton btnSökPID;
    private javax.swing.JComboBox<String> cmbLand;
    private javax.swing.JComboBox<String> cmbPrioritet;
    private javax.swing.JComboBox<String> cmbProjektChef;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblBeskrivning;
    private javax.swing.JLabel lblKostnad;
    private javax.swing.JLabel lblLand;
    private javax.swing.JLabel lblPrioritet;
    private javax.swing.JLabel lblProjektChef;
    private javax.swing.JLabel lblProjektID;
    private javax.swing.JLabel lblProjektNamn;
    private javax.swing.JLabel lblSlutDatum;
    private javax.swing.JLabel lblStartDatum;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtBeskrivning;
    private javax.swing.JTextField txtKostnad;
    private javax.swing.JTextField txtProjektID;
    private javax.swing.JTextField txtProjektNamn;
    private javax.swing.JTextField txtSlutDatum;
    private javax.swing.JTextField txtStartDatum;
    // End of variables declaration//GEN-END:variables
}
