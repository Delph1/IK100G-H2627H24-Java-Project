/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo_2024;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author SuperPC
 */
public class HandläggareProjektMeny extends javax.swing.JFrame {
    
    private InfDB idb;
    private int pid;
    
    /**
     * Konstruktor, handläggare läggs till via redigering
     * @param idb
     * @param pid
     */
    public HandläggareProjektMeny(InfDB idb, int pid) {
        this.idb = idb;
        this.pid = pid;
        initComponents();
        setLocationRelativeTo(null);    //Sätter rutan mitt i skärmen
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  //Stänger fönstret men inte programmet vid kryssad ruta
        formateraTabell();
        this.setTitle("Lägg till eller ta bort handläggare");
        cmbHandläggare.setVisible(false);
        btnSpara.setVisible(false);
        fyllCmbHandläggare();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTaBort = new javax.swing.JButton();
        btnLäggTill = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHandlaggare = new javax.swing.JTable();
        cmbHandläggare = new javax.swing.JComboBox<>();
        btnSpara = new javax.swing.JButton();
        btnAvbryt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnTaBort.setText("Ta bort");
        btnTaBort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortActionPerformed(evt);
            }
        });

        btnLäggTill.setText("Lägg till");
        btnLäggTill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLäggTillActionPerformed(evt);
            }
        });

        tblHandlaggare.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Förnamn", "Efternamn", "Epost"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHandlaggare.setShowVerticalLines(true);
        jScrollPane1.setViewportView(tblHandlaggare);

        cmbHandläggare.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj handläggare" }));

        btnSpara.setText("Spara");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        btnAvbryt.setText("Avbryt");
        btnAvbryt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvbrytActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbHandläggare, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSpara)
                        .addGap(0, 87, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLäggTill)
                        .addGap(18, 18, 18)
                        .addComponent(btnTaBort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAvbryt)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTaBort)
                    .addComponent(btnLäggTill)
                    .addComponent(btnAvbryt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbHandläggare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSpara))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTaBortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortActionPerformed
        int selectedRow = tblHandlaggare.getSelectedRow();
        if (selectedRow != -1) {
            int input = JOptionPane.showConfirmDialog(rootPane, "Är du säker på att du vill ta bort handläggaren från projektet?", "Ta bort handläggare", JOptionPane.YES_NO_OPTION);
            if (input == 0) {
                Object projekt = tblHandlaggare.getValueAt(selectedRow, 0); // Hämta aid-värde från kolumn 0
                int queryAid = Integer.parseInt(projekt.toString()); // Konvertera till int
                try {
                    String sqlFråga = "delete from ans_proj where pid = " + pid+" and aid = "+queryAid;
                    idb.delete(sqlFråga);
                    JOptionPane.showMessageDialog(null, "Handläggare har tagits bort från projektet.");
                    formateraTabell();
                } catch (InfException e) {
                    System.out.println("Databasen har inte uppdaterats. \n" + e.getMessage());
                    JOptionPane.showMessageDialog(null, "Handläggare har inte tagits bort.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingen rad är markerad!");
        }
    }//GEN-LAST:event_btnTaBortActionPerformed

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        if (cmbHandläggare.getSelectedIndex() ==0) {
            JOptionPane.showMessageDialog(null, "Välj en handläggare från rullmenyn");
        } else {
            int anställdID = 0;
            String[] namn = cmbHandläggare.getSelectedItem().toString().split(" ");
            String sqlFörnamn = namn[0];
            String sqlEfternamn = namn[1];
            String sqlFråga = "select aid from anstalld where fornamn = '" + sqlFörnamn + "' and efternamn = '" + sqlEfternamn + "'";
            try {
                anställdID = Integer.parseInt(idb.fetchSingle(sqlFråga));
            } catch (InfException e) {
                System.out.println(e.getMessage());
            }
            String query = "insert into ans_proj values (" + pid+", "+ anställdID + ");";
            try {
                idb.insert(query);
                formateraTabell();
                cmbHandläggare.setSelectedIndex(0);
            }
            catch (InfException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Databasfel");
            }
        }
    }//GEN-LAST:event_btnSparaActionPerformed

    private void btnLäggTillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLäggTillActionPerformed
        cmbHandläggare.setVisible(true);
        btnSpara.setVisible(true);
    }//GEN-LAST:event_btnLäggTillActionPerformed

    private void btnAvbrytActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvbrytActionPerformed
        dispose();
    }//GEN-LAST:event_btnAvbrytActionPerformed
    
    private void fyllCmbHandläggare() {
        String sqlFörnamn = "select fornamn from anstalld, handlaggare where anstalld.aid = handlaggare.aid;";
        String sqlEfternamn = "select efternamn from anstalld, handlaggare where anstalld.aid = handlaggare.aid;";
        ArrayList<String> allaFörnamn;
        ArrayList<String> allaEfternamn;
        try {
            allaFörnamn = idb.fetchColumn(sqlFörnamn);
            allaEfternamn = idb.fetchColumn(sqlEfternamn);
            for (int i = 0; i < allaFörnamn.size(); i++) {
                String fulltNamn = allaFörnamn.get(i) + " " + allaEfternamn.get(i);
                cmbHandläggare.addItem(fulltNamn);
            }
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }
    private ArrayList<HashMap<String,String>> hamtaHandlaggare(int pid)
    {
        String query = "Select aid, fornamn, efternamn, epost from anstalld where aid in (select aid from ans_proj where pid = " + pid + ");";
        
        try {
            ArrayList<HashMap<String, String>> allaHandlaggare = idb.fetchRows(query);
            return allaHandlaggare;
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
        return null;
    }

    private void formateraTabell() {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setRowCount(0);
        // Lägg till kolumnnamn i modellen
        tableModel.addColumn("ID");
        tableModel.addColumn("Förnamn");
        tableModel.addColumn("Efternamn");
        tableModel.addColumn("Epost");
        if (pid != 0) {
            ArrayList<HashMap<String, String>> allaHandlaggare = hamtaHandlaggare(pid);
            // Fyller table med data från databasen om det finns handläggare kopplade till projektet
            if (!allaHandlaggare.isEmpty()) 
            {
                for (HashMap<String, String> rad : allaHandlaggare) {
                    tableModel.addRow(new Object[]{
                        rad.get("aid"),
                        rad.get("fornamn"),
                        rad.get("efternamn"),
                        rad.get("epost")
                    });
                    
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Det finns inga deltagande handläggare på projektet än.");
            }
        }
        tblHandlaggare.setModel(tableModel);
                 // Sätt modellen på JTable
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvbryt;
    private javax.swing.JButton btnLäggTill;
    private javax.swing.JButton btnSpara;
    private javax.swing.JButton btnTaBort;
    private javax.swing.JComboBox<String> cmbHandläggare;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHandlaggare;
    // End of variables declaration//GEN-END:variables
}
