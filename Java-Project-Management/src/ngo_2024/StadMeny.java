package ngo_2024;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Claudia Kourieh
 */
public class StadMeny extends javax.swing.JFrame {

    private InfDB idb;

    public StadMeny(InfDB idb) {
        this.idb = idb;
        initComponents();
        setLocationRelativeTo(null); // Centrera fönstret
        getStad(); // Ladda alla städer direkt vid start
    }

    /**
     * Hämtar och visar alla städer i tabellen.
     */
    private void getStad() {
        try {
            String query = "SELECT sid, namn, land FROM stad"; // Hämtar stadens ID, namn och land-ID
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(query);

            if (resultat != null) {
                DefaultTableModel tableModel = new DefaultTableModel();
                tableModel.setRowCount(0);

                tableModel.addColumn("ID");
                tableModel.addColumn("Namn");
                tableModel.addColumn("Land");

                for (HashMap<String, String> rad : resultat) {
                    String landId = rad.get("land");
                    String landNamn = getLandNamn(landId); // Hämtar landets namn baserat på ID

                    tableModel.addRow(new Object[]{
                        rad.get("sid"),
                        rad.get("namn"),
                        landNamn
                    });
                }
                jTable1.setModel(tableModel);
            } else {
                JOptionPane.showMessageDialog(this, "Inga städer hittades.");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Fel vid hämtning av städer: " + e.getMessage());
        }
    }

    /**
     * Hämtar landets namn baserat på dess ID.
     */
    private String getLandNamn(String landId) {
        try {
            String query = "SELECT namn FROM land WHERE lid = " + landId;
            return idb.fetchSingle(query); // Returnerar landets namn
        } catch (InfException e) {
            return "Okänt land"; // Om något går fel, visa "Okänt land"
        }
    }
    
    public String getNamn(int sid)
        {
            String namn;
            try
            {
                String query = "SELECT namn FROM stad WHERE sid = " + sid;
                namn = idb.fetchSingle(query);
            }
            catch(InfException e)
            {
                System.out.println(e.getMessage());
                namn = null;
            }
        return namn;
    }
    
    public ArrayList<HashMap<String, String>> getAllaStader()
    {
        ArrayList<HashMap<String, String>> allaStäder = new ArrayList<>();
        try
        {
            String sqlfråga = "SELECT * FROM stad";
            allaStäder = idb.fetchRows(sqlfråga);
        }
        catch(InfException e)
        {
            System.out.println("Kunde inte hämta städer.");
            JOptionPane.showMessageDialog(null, "Kunde inte hämta städer. \n" + e.getMessage());
            allaStäder = null;
        }
        return allaStäder;

    }
        
    /**
     * Raderar den valda staden.
     */
    private void raderaStad() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            Object stadId = jTable1.getValueAt(selectedRow, 0); // Hämtar stadens ID

            try {
                String query = "DELETE FROM stad WHERE sid = " + stadId;
                idb.delete(query);
                JOptionPane.showMessageDialog(this, "Staden har raderats!");
                getStad(); // Uppdatera tabellen
            } catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Fel vid borttagning: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Välj en stad att radera!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUppdatera = new javax.swing.JButton();
        btnÄndra = new javax.swing.JButton();
        btnRadera = new javax.swing.JButton();
        btnNyStad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnUppdatera.setText("Uppdatera");
        btnUppdatera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUppdateraActionPerformed(evt);
            }
        });

        btnÄndra.setText("Ändra");
        btnÄndra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnÄndraActionPerformed(evt);
            }
        });

        btnRadera.setText("Radera");
        btnRadera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRaderaActionPerformed(evt);
            }
        });

        btnNyStad.setText("Ny Stad");
        btnNyStad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNyStadActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Namn", "Land"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUppdatera)
                        .addGap(18, 18, 18)
                        .addComponent(btnÄndra)
                        .addGap(18, 18, 18)
                        .addComponent(btnRadera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNyStad)))
                .addGap(0, 159, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUppdatera)
                    .addComponent(btnÄndra)
                    .addComponent(btnRadera)
                    .addComponent(btnNyStad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUppdateraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUppdateraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUppdateraActionPerformed

    private void btnÄndraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnÄndraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnÄndraActionPerformed

    private void btnRaderaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRaderaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRaderaActionPerformed

    private void btnNyStadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNyStadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNyStadActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNyStad;
    private javax.swing.JButton btnRadera;
    private javax.swing.JButton btnUppdatera;
    private javax.swing.JButton btnÄndra;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
