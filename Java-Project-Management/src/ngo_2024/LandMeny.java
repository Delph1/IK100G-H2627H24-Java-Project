/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo_2024;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Claudia Kourieh
 */
public class LandMeny extends javax.swing.JFrame {

    private InfDB idb; 
    /**
     * Creates new form LandMeny
     */
    public LandMeny(InfDB idb) {
        this.idb = idb;
        initComponents();
        setLocationRelativeTo(null);
        getLand();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Namn", "Befolkning", "Yta", "Huvudstad", "Språk", "Ekonomisk Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Uppdatera");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ändra");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Ta bort");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Ny Land");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        getLand();
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
       //new EditLand(idb, null).setVisible(true);
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        raderaLand();
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //new NyLand(idb).setVisible(true);
    }                                        

    private void getLand()
    {
        try {
            String query = "SELECT * FROM land";
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(query);
            
            if(resultat != null)
            {
                DefaultTableModel tableModel = new DefaultTableModel();
                tableModel.setRowCount(0);
                
                tableModel.addColumn("ID");
                tableModel.addColumn("Namn");
                tableModel.addColumn("Språk");
                tableModel.addColumn("Valuta");
                tableModel.addColumn("Tidszon");
                tableModel.addColumn("Politisk Struktur");
                tableModel.addColumn("Ekonomi");
                
                for (HashMap<String, String> rad : resultat) {
                    tableModel.addRow(new Object[]{
                        rad.get("lid"),
                        rad.get("namn"),
                        rad.get("sprak"),
                        rad.get("valuta"),
                        rad.get("tidszon"),
                        rad.get("politisk_struktur"),
                        rad.get("ekonomi")
                    });
                }
                jTable1.setModel(tableModel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Inga länder hittades.");
            }
        }
        catch (InfException e) 
        {
        JOptionPane.showMessageDialog(null, "Fel vid hämtning av länder: " + e.getMessage());
        }
    }
    
    private void raderaLand()
    {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1)
        {
            Object land = jTable1.getValueAt(selectedRow, 0);
            int queryLid = (int) land;

            // Först kollar vi om det finns några beroenden innan vi tar bort landet.
            try {
                String query1 = "UPDATE anstalld SET land = null WHERE land = " + queryLid;
                idb.update(query1);
                
                // Radera landet
                String query2 = "DELETE FROM land WHERE id = " + queryLid;
                idb.delete(query2);
            }
            catch (InfException e)
            {
                JOptionPane.showMessageDialog(null, "Fel vid borttagning av land: " + e.getMessage());
            }
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Ingen rad är markerad!");
        }
    }
    
    private void EditLand()
    {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1)
        {
            Object land = jTable1.getValueAt(selectedRow, 0);
            int queryLid = (int) land;
            //new EditLand(idb, queryLid).setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Ingen rad är markerad");
        }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}