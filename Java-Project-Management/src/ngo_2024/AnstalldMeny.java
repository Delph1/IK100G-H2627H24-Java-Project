/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo_2024;

import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Klass för att hantera Anställda
 * @author Fredrik Magnusson
 */
public class AnstalldMeny extends javax.swing.JFrame {
     private InfDB idb;
     private String admins;
     private String anvandare;

    /**
     * Creates new form Anstallda
     */
    public AnstalldMeny(InfDB idb, String admins, String anvandare) {
        this.idb = idb;
        this.admins = admins;
        this.anvandare = anvandare;
        initComponents();
        tfSok.addFocusListener(new java.awt.event.FocusAdapter() {
    @Override
    public void focusGained(java.awt.event.FocusEvent evt) {
        // Rensar textfältet om det innehåller standardtext
        if (tfSok.getText().equals("Ange handläggarens namn eller e-post")) {
            tfSok.setText("");
        }
    }
});
        setLocationRelativeTo(null); //Den här koden sätter fönstret i mitten av skärmen.
        hamtaAnstallda();

    }
    
    /**
     * Konstruktor som används för att bara visa en lista med personer som relaterar till användaren.
     * @param idb
     * @param anvandare 
     */
    public AnstalldMeny(InfDB idb, String anvandare) {
        this.idb = idb;
        this.anvandare = anvandare;
        initComponents();
        setLocationRelativeTo(null); //Den här koden sätter fönstret i mitten av skärmen.
        hamtaAnstalldaForAvdelning(anvandare);

        //döljer knappar om man öppnar via "personal på min avdelning"
        editAnstalld.setVisible(false);
        remAnstalld.setVisible(false);
        newAnstalld.setVisible(false);
    }
    
    /**
     * Förenklad konstruktor som kan används för att anropa klassen från andra klasser. 
     * @param idb 
     */
    
    public AnstalldMeny(InfDB idb) {
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fetchanstallda = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        editAnstalld = new javax.swing.JButton();
        remAnstalld = new javax.swing.JButton();
        newAnstalld = new javax.swing.JButton();
        tfSok = new javax.swing.JTextField();
        btnSok = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        fetchanstallda.setText("Hämta anställda");
        fetchanstallda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchanstalldaActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Förnamn", "Efternamn", "Adress", "Epost", "Telefon", "Anställningsdatum", "Lösenord", "Avdelning"
            }
        ));
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        editAnstalld.setText("Ändra anställd");
        editAnstalld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAnstalldActionPerformed(evt);
            }
        });

        remAnstalld.setText("Ta bort anställd");
        remAnstalld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remAnstalldActionPerformed(evt);
            }
        });

        newAnstalld.setText("Ny anställd");
        newAnstalld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAnstalldActionPerformed(evt);
            }
        });

        tfSok.setText("Ange handläggarens namn eller e-post");

        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fetchanstallda)
                        .addGap(18, 18, 18)
                        .addComponent(editAnstalld)
                        .addGap(18, 18, 18)
                        .addComponent(remAnstalld)
                        .addGap(18, 18, 18)
                        .addComponent(newAnstalld)
                        .addGap(106, 106, 106)
                        .addComponent(tfSok, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSok)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fetchanstallda)
                    .addComponent(editAnstalld)
                    .addComponent(remAnstalld)
                    .addComponent(newAnstalld)
                    .addComponent(tfSok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSok))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sökfunktion för att hitta handläggare
     */
    private void sokHandlaggare() {
        String sokterm = tfSok.getText().trim();

        if (sokterm.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ange ett namn eller en e-post för att söka.");
            return;
        }

        try {
            String query = "SELECT * FROM anstalld WHERE LOWER(fornamn) LIKE LOWER('%" + sokterm + "%') "
                    + "OR LOWER(efternamn) LIKE LOWER('%" + sokterm + "%') "
                    + "OR LOWER(epost) LIKE LOWER('%" + sokterm + "%')";

            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(query);

            if (resultat != null) {
                DefaultTableModel tableModel = new DefaultTableModel();
                tableModel.setRowCount(0);

                tableModel.addColumn("ID");
                tableModel.addColumn("Förnamn");
                tableModel.addColumn("Efternamn");
                tableModel.addColumn("E-post");
                tableModel.addColumn("Telefon");

                for (HashMap<String, String> rad : resultat) {
                    tableModel.addRow(new Object[]{
                        rad.get("aid"),
                        rad.get("fornamn"),
                        rad.get("efternamn"),
                        rad.get("epost"),
                        rad.get("telefon")
                    });
                }

                jTable1.setModel(tableModel);
            } else {
                JOptionPane.showMessageDialog(this, "Inga handläggare hittades med den angivna söktermen.");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Det uppstod ett fel vid sökningen i databasen.");
        }

        // Gör fältet tomt efter sökningen
        tfSok.setText("");
    }


    /**
     * Metod som hämtar ut alla anställda för en viss avdelning och stoppar in det i tabellen. Denna skulle kunna skrivas om till en SQL-sats med sub-queries.
     * @param queryAid 
     */
    private void hamtaAnstalldaForAvdelning(String queryAid) {
        try {
            // SQL-frågan för att hämta data från samma avdelning som användaren
            String query = "SELECT aid, fornamn, efternamn, adress, epost, telefon, anstallningsdatum, losenord, avdelning "
                    + "FROM anstalld WHERE avdelning IN (SELECT avdelning FROM anstalld WHERE aid = '" + queryAid + "')";
            System.out.println("SQL-fråga: " + query); // Logga frågan Markera bort
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(query);

            if (resultat != null) {
                // Skapa en tabellmodell
                DefaultTableModel tableModel = new DefaultTableModel();
                tableModel.setRowCount(0);

                // Lägg till kolumnnamnen
                tableModel.addColumn("ID");
                tableModel.addColumn("Förnamn");
                tableModel.addColumn("Efternamn");
                tableModel.addColumn("Adress");
                tableModel.addColumn("Epost");
                tableModel.addColumn("Telefon");
                tableModel.addColumn("Anställningsdatum");
                tableModel.addColumn("Lösenord");
                tableModel.addColumn("Avdelning");

                // Fyll tabellen med data från databasen
                for (HashMap<String, String> rad : resultat) {
                    tableModel.addRow(new Object[]{
                        rad.get("aid"),
                        rad.get("fornamn"),
                        rad.get("efternamn"),
                        rad.get("adress"),
                        rad.get("epost"),
                        rad.get("telefon"),
                        rad.get("anstallningsdatum"),
                        rad.get("losenord"),
                        rad.get("avdelning")
                    });
                }

                // Sätt modellen på JTable
                jTable1.setModel(tableModel);
            } else {
                JOptionPane.showMessageDialog(this, "Inga anställda hittades för din avdelning. Kontrollera med en administratör att din användare är del av en avdelning.");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Det gick inte att hämta anställda din avdelning från databasen. Kontrollera med en administratör att din användare är del av en avdelning.");
        }
    }

    /**
     * Hämtar ut alla anstallda och sätter in dem i tabellen som visas. 
     */
    private void hamtaAnstallda() {
        try {
            // SQL-frågan för att hämta data
            String query = "SELECT aid, fornamn, efternamn, adress, epost, telefon, anstallningsdatum, losenord, avdelning FROM anstalld";
            System.out.println("SQL-fråga: " + query); // Logga frågan Markera bort
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(query);

            if (resultat != null) {
                // Skapa en tabellmodell

                DefaultTableModel tableModel = new DefaultTableModel();
                tableModel.setRowCount(0);

                // Lägg till kolumnnamn i modellen
                tableModel.addColumn("ID");
                tableModel.addColumn("Förnamn");
                tableModel.addColumn("Efternamn");
                tableModel.addColumn("Adress");
                tableModel.addColumn("Epost");
                tableModel.addColumn("Telefon");
                tableModel.addColumn("Anställningsdatum");
                tableModel.addColumn("Lösenord");
                tableModel.addColumn("Avdelning");

                // Fyller table med data från databasen
                for (HashMap<String, String> rad : resultat) {
                    tableModel.addRow(new Object[]{
                        rad.get("aid"),
                        rad.get("fornamn"),
                        rad.get("efternamn"),
                        rad.get("adress"),
                        rad.get("epost"),
                        rad.get("telefon"),
                        rad.get("anstallningsdatum"),
                        rad.get("losenord"),
                        rad.get("avdelning")
                    });
                }

                // Sätt modellen på JTable
                jTable1.setModel(tableModel);
            } else {
                JOptionPane.showMessageDialog(this, "Inga anställda hittades i databasen. Kontrollera med ansvarig att databasen fungerar som den ska.");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Det gick inte att hämta anställda från databasen. Säkerställ att databasen är startad, att databaskopplingen fungerar och att det finns några anställda i databasen.");
        }
    }
  
    /**
     * Raderar en i tabellen vald anställd.
     */
    private void taBortAnstalld() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            Object anstalld = jTable1.getValueAt(selectedRow, 0); // Hämta värde från kolumn 0
            String queryAid = anstalld.toString(); // Konvertera till String
            try {

                String sqlfråga1 = "UPDATE projekt SET projektchef = null Where projektchef = '" + queryAid + "'";
                idb.update(sqlfråga1);
                try {
                    String sqlfråga6 = "UPDATE avdelning SET chef = null Where chef = '" + queryAid + "'";
                    idb.update(sqlfråga6);
                    try {
                        String sqlfråga4 = "DELETE FROM ans_proj WHERE aid = '" + queryAid + "'";
                        idb.delete(sqlfråga4);
                        try {
                            String sqlfråga3 = "UPDATE handlaggare SET mentor = null Where mentor = '" + queryAid + "'";
                            idb.update(sqlfråga3);
                            try {
                                String sqlfråga5 = "DELETE FROM admin WHERE aid = '" + queryAid + "'";
                                idb.delete(sqlfråga5);
                                try {
                                    String sqlfråga = "DELETE FROM handlaggare WHERE aid = '" + queryAid + "'";
                                    idb.delete(sqlfråga);
                                    try {
                                        String sqlfråga2 = "DELETE FROM anstalld WHERE aid = '" + queryAid + "'";
                                        idb.delete(sqlfråga2);
                                    } catch (InfException e) {
                                        JOptionPane.showMessageDialog(this, "Ett fel uppstod när den anställde skulle raderas från tabellen \"anstalld\". Kontakta IT för att undersöka var felet ligger.");
                                    }
                                } catch (InfException e) {
                                    JOptionPane.showMessageDialog(this, "Ett fel uppstod när den anställde skulle raderas från tabellen \"handlaggare\". Kontakta IT för att undersöka var felet ligger.");
                                }
                            } catch (InfException e) {
                                JOptionPane.showMessageDialog(this, "Ett fel uppstod när den anställde skulle raderas från tabellen \"admin\". Kontakta IT för att undersöka var felet ligger.");
                            }
                        } catch (InfException e) {
                            JOptionPane.showMessageDialog(this, "Ett fel uppstod när den anställde skulle tas bort som mentor i \"handlaggare\". Kontakta IT för att undersöka var felet ligger.");
                        }
                    } catch (InfException e) {
                        JOptionPane.showMessageDialog(this, "Ett fel uppstod när den anställde skulle raderas från tabellen som knyter den till ett projekt (\"ans_proj\"). Kontakta IT för att undersöka var felet ligger.");
                    }
                } catch (InfException e) {
                    JOptionPane.showMessageDialog(this, "Ett fel uppstod när den anställde skulle tas bort som chef från tabellen \"avdelning\". Kontakta IT för att undersöka var felet ligger.");
                }

            } catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Ett fel uppstod när den anställde skulle tas bort som projektledare från \"projekt\". Kontakta IT för att undersöka var felet ligger.");
            }
            hamtaAnstallda();
        } else {
            JOptionPane.showMessageDialog(this, "Du behöver markera en anställd i tabellen innan du klickar på knappen.");
        }
    }

    /**
     * Öppnar upp ett fönster för att redigera en i tabellen markerad anställd.
     */
    private void editAnstalld() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            Object anstalld = jTable1.getValueAt(selectedRow, 0); // Hämta värde från kolumn 0
            String queryAid = anstalld.toString(); // Konvertera till String
            new EditAnstalld(idb, queryAid, admins, anvandare).setVisible(true); //öppnar nytt fönster, skickar med den anställde via AID från databasen

        } else {
            JOptionPane.showMessageDialog(this, "Du behöver markera en anställd i tabellen innan du klickar på knappen.");
        }
    }

    /**
     * Metod för att hämta ut namnet på en chef för en avdelning.
     * @param aid
     * @return 
     */
    public String getChefNamn(String aid) 
    {
        String chefNamn;
        try {
            String query = "SELECT CONCAT(fornamn, ' ', efternamn) as namn FROM anstalld WHERE aid = '" + aid + "'";
            chefNamn = idb.fetchSingle(query);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Användaren hittades inte. Kontrollera att den chef som valts är korrekt och sedan att databasen fungerar som den ska.");
            chefNamn = null;
        }
        return chefNamn;
    }
        
    /**
     * Metod för att hämta ut alla Anställd(a).
     * @return 
     */
    public ArrayList<HashMap<String, String>> getAllaAnstallda() {
        ArrayList<HashMap<String, String>> allaAnstallda;
        try {
            String sqlfråga = "SELECT * FROM anstalld";
            allaAnstallda = idb.fetchRows(sqlfråga);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel när Anställda skulle hämtas ur databasen. Kontrollera att databasen fungerar som den ska.");
            allaAnstallda = null;
        }
        return allaAnstallda;
    }
    
     /**
     * Metod för att hämta ut en Anställd via aid.
     * @param aid
     * @return 
     */
    public HashMap<String, String> getEnAnstalld(String aid) {
        HashMap<String, String> enAnstalld;
        try {
            String sqlfråga = "SELECT * FROM anstalld WHERE aid = '" + aid + "'";
            enAnstalld = idb.fetchRow(sqlfråga);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Det gick inte att hämta den anställde från databasen. Kontrollera att databasen fungerar som den ska.");
            enAnstalld = null;
        }
        return enAnstalld;
    }
    
    /**
     * Knappar nedan.
     */
    
    private void fetchanstalldaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchanstalldaActionPerformed
        if (!newAnstalld.isVisible()) { // Kontrollera om knappen är dold
            hamtaAnstalldaForAvdelning(anvandare); // Kör denna metod om newAnstalld är dold
        } else {
            hamtaAnstallda(); // Annars kör den vanliga metoden
        }
    }//GEN-LAST:event_fetchanstalldaActionPerformed

    private void newAnstalldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAnstalldActionPerformed
        new EditAnstalld(idb).setVisible(true);
    }//GEN-LAST:event_newAnstalldActionPerformed

    private void editAnstalldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAnstalldActionPerformed
        editAnstalld();
    }//GEN-LAST:event_editAnstalldActionPerformed

    private void remAnstalldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remAnstalldActionPerformed
        taBortAnstalld();        // TODO add your handling code here:
    }//GEN-LAST:event_remAnstalldActionPerformed

    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        sokHandlaggare();
    }//GEN-LAST:event_btnSokActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSok;
    private javax.swing.JButton editAnstalld;
    private javax.swing.JButton fetchanstallda;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton newAnstalld;
    private javax.swing.JButton remAnstalld;
    private javax.swing.JTextField tfSok;
    // End of variables declaration//GEN-END:variables
}
