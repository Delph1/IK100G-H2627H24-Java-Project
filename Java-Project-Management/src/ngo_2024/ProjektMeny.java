/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo_2024;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.text.SimpleDateFormat;

/**
 *
 * @author Märta Sjöblom
 */
public class ProjektMeny extends javax.swing.JFrame {
    
    private InfDB idb;
    private String aid;
    private boolean projCh;
    private boolean admin;
    private AvdelningMeny avdelning;
    private AnstalldMeny anstalld;
    
    /**
     * Admin-vy
     */
    public ProjektMeny(InfDB idb) {
        this.idb = idb;
        this.avdelning = new AvdelningMeny(idb);
        this.anstalld = new AnstalldMeny(idb);
        initComponents();
        fyllCmbAvdelningar();
        fyllCmbStatus();
        hamtaProjekt();
        admin = true;
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );
    }
    
    /**
     * Konstruktor för Mina projekt
     * @param idb
     * @param aid 
     */
    public ProjektMeny(InfDB idb, String aid) {
        this.idb = idb;
        this.aid = aid;
        this.anstalld = new AnstalldMeny(idb);
        initComponents();
        btnMinaProjekt.setVisible(false);
        btnAllaProjekt.setVisible(false);   //Behöver inte kunna se dessa
        lblAvdelning.setVisible(false);
        cmbAvdelningsVal.setVisible(false);
        lblStatus.setVisible(false);
        cmbStatus.setVisible(false);
        btnPartners.setVisible(false);
        btnÄndraProjekt.setVisible(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );
        hamtaProjekt(aid);
    }
    
   /**
    * Konstruktor för att visa avdelningsvy
    * @param idb
    * @param avdelning
    * @param aid 
    */
    public ProjektMeny(InfDB idb, boolean avdelning, String aid) {
        this.idb = idb;
        this.aid = aid;
        this.avdelning = new AvdelningMeny(idb);
        this.anstalld = new AnstalldMeny(idb);
        initComponents();
        fyllCmbAvdelningar();
        fyllCmbStatus();
        setLocationRelativeTo(null);
        btnTaBortProjekt.setVisible(false);
        btnMinaProjekt.setVisible(false);
        btnÄndraProjekt.setVisible(false);
        btnLäggTillProjekt.setVisible(false);
        btnPartners.setVisible(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        hamtaProjektAvdelning(aid);
    }
    
    /**
     * Konstruktor för Projektledare, tar bort och lägger till saker i menyn därefter
     * @param idb
     * @param aid
     * @param projCh 
     */
    public ProjektMeny(InfDB idb, String aid, boolean projCh) {
        this.idb = idb;
        this.aid = aid;
        this.projCh = projCh;
        this.avdelning = new AvdelningMeny(idb);
        this.anstalld = new AnstalldMeny(idb);
        initComponents();
        fyllCmbAvdelningar();
        fyllCmbStatus();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );
        hamtaProjekt(aid);
        this.setTitle("Projektledare");
        lblAvdelning.setVisible(false); //Behöver inte kunna se dessa
        cmbAvdelningsVal.setVisible(false); //Behöver inte kunna se dessa
        lblStatus.setVisible(false);    //Behöver inte kunna se dessa   
        cmbStatus.setVisible(false);    //Behöver inte kunna se dessa
        btnPartners.setVisible(false);  //Behöver inte kunna se dessa
        btnTaBortProjekt.setVisible(false);     //Tolkar det som att ProjektChef inte ska kunna ta bort projekt
        btnAllaProjekt.setVisible(false);   //Behöver inte kunna se dessa
        btnMinaProjekt.setVisible(false); //Behöver inte se projekt de deltar på i denna vy
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnÄndraProjekt = new javax.swing.JButton();
        btnTaBortProjekt = new javax.swing.JButton();
        btnLäggTillProjekt = new javax.swing.JButton();
        cmbAvdelningsVal = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProjekt = new javax.swing.JTable();
        btnDatumSök = new javax.swing.JButton();
        lblSokDatum = new javax.swing.JLabel();
        lblBindeStreck = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        btnAllaProjekt = new javax.swing.JButton();
        lblAvdelning = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        btnMinaProjekt = new javax.swing.JButton();
        jDateStartdatumSök = new com.toedter.calendar.JDateChooser();
        jDateSlutdatumSök = new com.toedter.calendar.JDateChooser();
        btnPartners = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projekt");
        setPreferredSize(new java.awt.Dimension(1050, 480));

        btnÄndraProjekt.setText("Redigera projekt");
        btnÄndraProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnÄndraProjektActionPerformed(evt);
            }
        });

        btnTaBortProjekt.setText("Ta bort projekt");
        btnTaBortProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortProjektActionPerformed(evt);
            }
        });

        btnLäggTillProjekt.setText("Nytt Projekt");
        btnLäggTillProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLäggTillProjektActionPerformed(evt);
            }
        });

        cmbAvdelningsVal.setToolTipText("");
        cmbAvdelningsVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAvdelningsValActionPerformed(evt);
            }
        });

        tblProjekt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProjektID", "Projektnamn", "Beskrivning", "Startdatum", "Slutdatum", "Kostnad", "Status", "Prioritet", "Projektchef", "Land"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProjekt);

        btnDatumSök.setText("Sök datum");
        btnDatumSök.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatumSökActionPerformed(evt);
            }
        });

        lblSokDatum.setText("Filtrera på datum");

        lblBindeStreck.setText("-");

        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        btnAllaProjekt.setText("Visa alla projekt");
        btnAllaProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllaProjektActionPerformed(evt);
            }
        });

        lblAvdelning.setText("Filtrera på avdelning");

        lblStatus.setText("på status");

        btnMinaProjekt.setText("Visa mina projekt");
        btnMinaProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinaProjektActionPerformed(evt);
            }
        });

        jDateStartdatumSök.setDateFormatString("yyyy-MM-dd");

        jDateSlutdatumSök.setDateFormatString("yyyy-MM-dd");

        btnPartners.setText("Hantera partners");
        btnPartners.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPartnersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnÄndraProjekt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLäggTillProjekt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTaBortProjekt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPartners))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnMinaProjekt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAllaProjekt)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSokDatum)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDateStartdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBindeStreck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateSlutdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDatumSök))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAvdelning)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbAvdelningsVal, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnÄndraProjekt)
                            .addComponent(btnTaBortProjekt)
                            .addComponent(btnLäggTillProjekt)
                            .addComponent(cmbAvdelningsVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAvdelning)
                            .addComponent(btnPartners))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAllaProjekt)
                        .addComponent(btnMinaProjekt))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDatumSök)
                            .addComponent(lblSokDatum))
                        .addComponent(lblBindeStreck)
                        .addComponent(jDateStartdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jDateSlutdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnÄndraProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnÄndraProjektActionPerformed
        if (admin) {
            editProjekt(admin);
        } else {
            editProjekt();
        }
    }//GEN-LAST:event_btnÄndraProjektActionPerformed

    private void btnLäggTillProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLäggTillProjektActionPerformed
        new EditProjekt(idb, true).setVisible(true);
    }//GEN-LAST:event_btnLäggTillProjektActionPerformed

    private void btnTaBortProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortProjektActionPerformed
        int selectedRow = tblProjekt.getSelectedRow();
        if (selectedRow != -1) {
            int input = JOptionPane.showConfirmDialog(rootPane, "Är du säker på att du vill ta bort projektet?", "Ta bort projekt", JOptionPane.YES_NO_OPTION);
            if (input == 0) {
                Object projekt = tblProjekt.getValueAt(selectedRow, 0); // Hämta pid-värde från kolumn 0
                int queryPid = Integer.parseInt(projekt.toString()); // Konvertera till int
                try {
                    String sqlFråga = "delete from projekt where pid = " + queryPid;
                    idb.delete(sqlFråga);
                    JOptionPane.showMessageDialog(this, "Projekt har tagits bort.");

                } catch (InfException e) {
                    JOptionPane.showMessageDialog(this, "Projekt har inte tagits bort.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingen rad är markerad!");
        }
    }//GEN-LAST:event_btnTaBortProjektActionPerformed

    private void cmbAvdelningsValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAvdelningsValActionPerformed
        if (cmbAvdelningsVal.getSelectedIndex() == 0) {
            hamtaProjekt();
            cmbStatus.setSelectedItem("Välj status");
        } else {
            cmbStatus.setSelectedIndex(0);
            ArrayList<HashMap<String, String>> soktaProjekt;
            try {
                String valdAvdelning = cmbAvdelningsVal.getSelectedItem().toString();
                String fraga = "Select * from projekt where pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning in (select avdid from avdelning where avdelning.namn = '" + valdAvdelning + "')))";
                soktaProjekt = idb.fetchRows(fraga);
                if (soktaProjekt.isEmpty()) {
                    ingaProjekt();
                    JOptionPane.showMessageDialog(this, "Det fanns inga projekt inom din avgränsning.");
                }
                formateraTabell(soktaProjekt);

            } catch (InfException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this, "Det gick inte att hämta information om projekt som hör till din avdelning från databasen.");
            }
        }
    }//GEN-LAST:event_cmbAvdelningsValActionPerformed

    private void btnDatumSökActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatumSökActionPerformed
        String startDatum = "1000-01-01";
        String slutDatum = "3000-12-31";
        SimpleDateFormat datumformat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            startDatum = datumformat.format(jDateStartdatumSök.getDate());
            slutDatum = datumformat.format(jDateSlutdatumSök.getDate());
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Se över dina sökparametrar en gång till. Du måste ange ett datum i båda datumfälten och Startdatum måste komma före Slutdatum.");
        }
        if (!startDatum.isBlank() && Validering.datumKontroll(startDatum) && !slutDatum.isBlank() && Validering.datumKontroll(slutDatum) && jDateStartdatumSök.getDate().before(jDateSlutdatumSök.getDate())) {
            if (cmbAvdelningsVal.getSelectedIndex() == 0 && cmbStatus.getSelectedIndex() == 0) {
                String datumFraga = "Select * from projekt where startdatum >= '" + startDatum + "' AND slutdatum <= '" + slutDatum + "';";
                try {
                    ArrayList<HashMap<String, String>> soktaProjekt = idb.fetchRows(datumFraga);
                    ingaProjekt();
                    if (soktaProjekt.isEmpty()) {
                        ingaProjekt();
                        JOptionPane.showMessageDialog(this, "Inga projekt hittades.");
                    } else {
                        formateraTabell(soktaProjekt);
                    }
                } catch (InfException e) {
                    JOptionPane.showMessageDialog(this, "Något gick fel med databasen när projekt skulle hämtas ut med de valda datumen.");
                }
            } else if (cmbAvdelningsVal.getSelectedIndex() != 0 && cmbStatus.getSelectedIndex() == 0) {
                String valdAvdelning = cmbAvdelningsVal.getSelectedItem().toString();
                String avdDatumFraga = "Select * from projekt where startdatum >= '" + startDatum + "' AND slutdatum <= '" + slutDatum
                        + "' and pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning =(select avdid from avdelning where namn = '" + valdAvdelning + "')));";
                try {
                    ArrayList<HashMap<String, String>> soktaProjekt = idb.fetchRows(avdDatumFraga);
                    ingaProjekt();
                    if (soktaProjekt.isEmpty()) {
                        ingaProjekt();
                        JOptionPane.showMessageDialog(this, "Inga projekt hittades.");
                    } else {
                        formateraTabell(soktaProjekt);
                    }
                } catch (InfException e) {
                    JOptionPane.showMessageDialog(this, "Något gick fel när projekt skulle hämtas ur databasen för valda sökparametrar.");
                }
            } else if (cmbAvdelningsVal.getSelectedIndex() == 0 && cmbStatus.getSelectedIndex() != 0) {
                String valdStatus = cmbStatus.getSelectedItem().toString();
                String statDatumFraga = "Select * from projekt where startdatum >= '" + startDatum + "' AND slutdatum <= '" + slutDatum + "' and status = '" + valdStatus + "';";
                try {
                    ArrayList<HashMap<String, String>> soktaProjekt = idb.fetchRows(statDatumFraga);
                    ingaProjekt();
                    if (soktaProjekt.isEmpty()) {
                        ingaProjekt();
                        JOptionPane.showMessageDialog(this, "Inga projekt hittades.");
                    } else {
                        formateraTabell(soktaProjekt);
                    }
                } catch (InfException e) {
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(this, "Något gick fel när projekt skulle hämtas ur databasen för valda sökparametrar.");
                }
            } else {
                String valdAvdelning = cmbAvdelningsVal.getSelectedItem().toString();
                String valdStatus = cmbStatus.getSelectedItem().toString();
                String avdStatusDatumFraga = "Select * from projekt where startdatum >= '" + startDatum + "' AND slutdatum <= '" + slutDatum
                        + "' and status = '" + valdStatus + "' and pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning =(select avdid from avdelning where namn = '" + valdAvdelning + "')));";
                try {
                    ArrayList<HashMap<String, String>> soktaProjekt = idb.fetchRows(avdStatusDatumFraga);
                    ingaProjekt();
                    if (soktaProjekt.isEmpty()) {
                        ingaProjekt();
                        JOptionPane.showMessageDialog(this, "Inga projekt hittades.");
                    } else {
                        formateraTabell(soktaProjekt);
                    }
                } catch (InfException e) {
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(this, "Något gick fel när projekt skulle hämtas ur databasen för valda sökparametrar");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Se över dina sökparametrar en gång till. Du måste ange ett datum i båda fälten och Startdatum måste komma före Slutdatum.");
        }
    }//GEN-LAST:event_btnDatumSökActionPerformed

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed

        if (cmbStatus.getSelectedIndex() == 0) {
            hamtaProjekt();
        } else {
            ArrayList<HashMap<String, String>> soktaProjekt;
            String valdStatus = cmbStatus.getSelectedItem().toString();
            String valdAvdelning = cmbAvdelningsVal.getSelectedItem().toString();
            if (cmbAvdelningsVal.getSelectedIndex() == 0) {
                try {
                    String fraga = "Select * from projekt where status = '" + valdStatus + "';";
                    soktaProjekt = idb.fetchRows(fraga);
                    formateraTabell(soktaProjekt);

                } catch (InfException e) {
                    JOptionPane.showMessageDialog(this, "Något gick fel när valda projekt skulle hämtas ur databasen.");
                }
            } else {
                try {
                    String fraga = "Select * from projekt where status = '" + valdStatus + "' and pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning in (select avdid from avdelning where avdelning.namn = '" + valdAvdelning + "')));";
                    soktaProjekt = idb.fetchRows(fraga);
                    if (soktaProjekt.isEmpty()) {
                        ingaProjekt();
                        JOptionPane.showMessageDialog(this, "Inga projekt hittades.");
                    } else {
                        formateraTabell(soktaProjekt);
                    }
                } catch (InfException e) {
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(this, "Något gick fel när valda projekt skulle hämtas ur databasen.");
                }
            }
        }
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void btnAllaProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllaProjektActionPerformed
        hamtaProjekt();
        cmbAvdelningsVal.setSelectedIndex(0);
        cmbStatus.setSelectedIndex(0);
        jDateStartdatumSök.setDate(null);
        jDateSlutdatumSök.setDate(null);
    }//GEN-LAST:event_btnAllaProjektActionPerformed

    private void btnMinaProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinaProjektActionPerformed
        ingaProjekt();
        if (aid != null) {
            hamtaProjekt(aid);
            cmbAvdelningsVal.setSelectedIndex(0);
            cmbStatus.setSelectedIndex(0);
        } else {
            ingaProjekt();
            JOptionPane.showMessageDialog(null, "Du har inga projekt.");
        }
    }//GEN-LAST:event_btnMinaProjektActionPerformed

    private void btnPartnersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPartnersActionPerformed
        new EditProjektPartner(idb).setVisible(true);
    }//GEN-LAST:event_btnPartnersActionPerformed

    private void fyllCmbAvdelningar() {
        ArrayList<String> allaAvdelningar = avdelning.getAllaAvdelningsnamn();
        if (allaAvdelningar != null) {
            for (String enAvdelning : allaAvdelningar) {
                cmbAvdelningsVal.addItem(enAvdelning);
            }
        }
    }
    
    private void fyllCmbStatus() {
        String sqlfråga = "select distinct status from projekt;";
        ArrayList<String> allaStatus;
        cmbStatus.addItem("Välj status");
        try {
            allaStatus = idb.fetchColumn(sqlfråga);
            for (String status : allaStatus) {
                cmbStatus.addItem(status);
            }
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Något gick fel när status skulle hämtas ur databasen.");
        }
    }
    
    private void formateraTabell(ArrayList<HashMap<String, String>> param) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setRowCount(0);

        // Lägg till kolumnnamn i modellen
        tableModel.addColumn("ID");
        tableModel.addColumn("Projektnamn");
        tableModel.addColumn("Beskrivning");
        tableModel.addColumn("Startdatum");
        tableModel.addColumn("Slutdatum");
        tableModel.addColumn("Kostnad");
        tableModel.addColumn("Status");
        tableModel.addColumn("Prioritet");
        tableModel.addColumn("Projektchef");
        tableModel.addColumn("Land");

        // Fyller table med data från databasen
        for (HashMap<String, String> rad : param) {
            tableModel.addRow(new Object[]{
                rad.get("pid"),
                rad.get("projektnamn"),
                rad.get("beskrivning"),
                rad.get("startdatum"),
                rad.get("slutdatum"),
                rad.get("kostnad"),
                rad.get("status"),
                rad.get("prioritet"),
                anstalld.getChefNamn(rad.get("projektchef")),
                hamtaLandNamn(rad.get("land"))
            });
            // Sätt modellen på JTable
            tblProjekt.setModel(tableModel);
        }
    }
    
    private void hamtaProjekt() {
        ArrayList<HashMap<String, String>> allaProjekt;
        try {
            String sqlfråga = "SELECT * FROM projekt";
            allaProjekt = idb.fetchRows(sqlfråga);
            if (allaProjekt.isEmpty()) {
                ingaProjekt();
            } else {
                formateraTabell(allaProjekt);
            }
        } catch (InfException e) {
            System.out.println("Kunde inte hämta projekt.\n" + e.getMessage());
            JOptionPane.showMessageDialog(this, "Kunde inte hämta projekt.");
        }
    }
    
    /**
     * Hämtar alla projekt för en viss anställd, tar bort alla funktioner att söka, lägga till, ta bort och redigera projekt
     * @param aid 
     */
    private void hamtaProjekt(String aid) {
        btnLäggTillProjekt.setVisible(false);
        btnTaBortProjekt.setVisible(false);
        lblSokDatum.setVisible(false);
        jDateStartdatumSök.setVisible(false);
        lblBindeStreck.setVisible(false);
        jDateSlutdatumSök.setVisible(false);
        btnDatumSök.setVisible(false);

        ArrayList<HashMap<String, String>> allaProjekt;
        try {
            String sqlfråga = "SELECT * FROM projekt WHERE pid IN (SELECT pid FROM ans_proj WHERE aid = "+ aid + ") UNION SELECT * FROM projekt WHERE projektchef = " + aid + ";";
            allaProjekt = idb.fetchRows(sqlfråga);
            if (allaProjekt.isEmpty()) {
                ingaProjekt();
                JOptionPane.showMessageDialog(this, "Du har inga projekt");
            } else {
                this.setTitle("Mina projekt");
                formateraTabell(allaProjekt);
            }
        } catch (InfException e) {
            System.out.println("Kunde inte hämta projekt.\n" + e.getMessage());
            JOptionPane.showMessageDialog(this, "Kunde inte hämta projekt.");
        }
    }
    
    private void hamtaProjektAvdelning(String aid) {
        String valdAvdelning = "Välj avdelning";
        try {
            String query = "SELECT * FROM projekt WHERE pid IN (SELECT pid FROM ans_proj WHERE aid = "+ aid + ") UNION SELECT * FROM projekt WHERE projektchef = " + aid + ";";
            valdAvdelning = idb.fetchSingle(query);
        } catch (InfException e) {
            System.out.println(e.getMessage());
        }
        cmbAvdelningsVal.setSelectedItem(valdAvdelning);
        ArrayList<HashMap<String, String>> soktaProjekt;
        try {
            String fraga = "Select * from projekt where pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning in (select avdid from avdelning where avdelning.namn = '" + valdAvdelning + "')))";
            soktaProjekt = idb.fetchRows(fraga);
            if (soktaProjekt.isEmpty()) {
                ingaProjekt();
                JOptionPane.showMessageDialog(this, "Det finns inga projekt på den här avdelningen");
            } else {
                this.setTitle("Projekt på min avdelning");
                formateraTabell(soktaProjekt);
            }
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Något gick fel när projekt för denna avdelning skulle hämtas ur databasen.");
        }
    }
    
    private void hamtaProjektSomProjektChef(String aid) {
        btnLäggTillProjekt.setVisible(false);
        btnTaBortProjekt.setVisible(false);
        lblSokDatum.setVisible(false);
        jDateStartdatumSök.setVisible(false);
        lblBindeStreck.setVisible(false);
        jDateSlutdatumSök.setVisible(false);
        btnDatumSök.setVisible(false);
        cmbAvdelningsVal.setVisible(false);
        cmbStatus.setVisible(false);
        lblAvdelning.setVisible(false);
        lblStatus.setVisible(false);
        String PCAid = aid;

        ArrayList<HashMap<String, String>> allaProjekt = new ArrayList<>();
        try {
            String sqlfråga = "SELECT * FROM projekt where projektchef =" + PCAid;
            allaProjekt = idb.fetchRows(sqlfråga);
        } catch (InfException e) {
            System.out.println("Kunde inte hämta projekt.\n" + e.getMessage());
            JOptionPane.showMessageDialog(this, "Kunde inte hämta projekt.");
        }
        if (allaProjekt.isEmpty()) {
            ingaProjekt();
            JOptionPane.showMessageDialog(this, "Du är inte projektchef för några projekt");
        } else {
            this.setTitle("Mina projekt");
            formateraTabell(allaProjekt);
        }
    }

    private void editProjekt() {
        int selectedRow = tblProjekt.getSelectedRow();
        if (selectedRow != -1) {
            Object projekt = tblProjekt.getValueAt(selectedRow, 0); // Hämta värde från kolumn 0
            int queryPid = Integer.parseInt(projekt.toString()); // Konvertera till String
            String sqlÄrPL = "select projektchef from projekt where pid ="+queryPid;
            try {
                String dbPL = idb.fetchSingle(sqlÄrPL);
                if (aid.equals(dbPL)) {
                    new EditProjekt(idb, queryPid).setVisible(true); //öppnar nytt fönster, skickar med den projektets PID från databasen
                }
                else {
                    JOptionPane.showMessageDialog(this, "Du är inte projektchef för det här projektet\noch kan därför inte redigera det.");
                }
            }
            catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Databasfel");
            }
            
            // JOptionPane.showMessageDialog(this, "Valt ID: " + projekt);
        } else {
            JOptionPane.showMessageDialog(this, "Ingen rad är markerad!");
        }
    }

    private void editProjekt(boolean admin) {
        int selectedRow = tblProjekt.getSelectedRow();
        if (selectedRow != -1) {
            Object projekt = tblProjekt.getValueAt(selectedRow, 0); // Hämta värde från kolumn 0
            int queryPid = Integer.parseInt(projekt.toString()); // Konvertera till String
            new EditProjekt(idb, queryPid, admin).setVisible(true); //öppnar nytt fönster, skickar med den projektets PID från databasen

            // JOptionPane.showMessageDialog(this, "Valt ID: " + projekt);
        } else {
            JOptionPane.showMessageDialog(this, "Ingen rad är markerad!");
        }
    }
    
    /**
     * Hämtar namnet på ett Land utifrån LID, för att kunna visas i projekt
     * @param landID
     * @return landNamn
     */
    private String hamtaLandNamn(String landID) {
        String landNamn = landID;
        String sqlLandNamn = "Select namn from land where lid = "+landID;
        try {
            landNamn = idb.fetchSingle(sqlLandNamn);
        }
        catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
        return landNamn;
    }
    
    private void ingaProjekt() {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setRowCount(0);

        // Lägg till kolumnnamn i modellen
        tableModel.addColumn("ID");
        tableModel.addColumn("Projektnamn");
        tableModel.addColumn("Beskrivning");
        tableModel.addColumn("Startdatum");
        tableModel.addColumn("Slutdatum");
        tableModel.addColumn("Kostnad");
        tableModel.addColumn("Status");
        tableModel.addColumn("Prioritet");
        tableModel.addColumn("Projektchef");
        tableModel.addColumn("Land");

        tblProjekt.setModel(tableModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllaProjekt;
    private javax.swing.JButton btnDatumSök;
    private javax.swing.JButton btnLäggTillProjekt;
    private javax.swing.JButton btnMinaProjekt;
    private javax.swing.JButton btnPartners;
    private javax.swing.JButton btnTaBortProjekt;
    private javax.swing.JButton btnÄndraProjekt;
    private javax.swing.JComboBox<String> cmbAvdelningsVal;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser jDateSlutdatumSök;
    private com.toedter.calendar.JDateChooser jDateStartdatumSök;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvdelning;
    private javax.swing.JLabel lblBindeStreck;
    private javax.swing.JLabel lblSokDatum;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblProjekt;
    // End of variables declaration//GEN-END:variables
}
