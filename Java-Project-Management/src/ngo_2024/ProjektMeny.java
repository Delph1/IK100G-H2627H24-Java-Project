/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo_2024;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author SuperPC
 */
public class ProjektMeny extends javax.swing.JFrame {
    
    private InfDB idb;
    private Projekt nyttProjekt;
    private String aid;
    /**
     * Creates new form ProjektMeny
     */
    public ProjektMeny(InfDB idb) {
        this.idb = idb;
        initComponents();
        nyttProjekt = new Projekt(idb);
        fyllCmbAvdelningar();
        fyllCmbStatus();
        hamtaProjekt();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );
    }

        public ProjektMeny(InfDB idb, String aid) {
        this.idb = idb;
        this.aid = aid;
        initComponents();
        nyttProjekt = new Projekt(idb);
        fyllCmbAvdelningar();
        fyllCmbStatus();
        hamtaProjekt(Integer.parseInt(aid));
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnÄndraProjekt = new javax.swing.JButton();
        btnTaBortProjekt = new javax.swing.JButton();
        btnLäggTillProjekt = new javax.swing.JButton();
        cmbAvdelningsVal = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProjekt = new javax.swing.JTable();
        btnDatumSök = new javax.swing.JButton();
        txtSlutdatumSök = new javax.swing.JTextField();
        txtStartdatumSök = new javax.swing.JTextField();
        lblSokDatum = new javax.swing.JLabel();
        lblBindeStreck = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 480));

        btnÄndraProjekt.setText("Ändra projekt");
        btnÄndraProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnÄndraProjektActionPerformed(evt);
            }
        });

        btnTaBortProjekt.setText("Ta bort projekt");
        btnTaBortProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortProjektActionPerformed(evt);
            }
        });

        btnLäggTillProjekt.setText("Nytt Projekt");
        btnLäggTillProjekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLäggTillProjektActionPerformed(evt);
            }
        });

        cmbAvdelningsVal.setToolTipText("");
        cmbAvdelningsVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAvdelningsValActionPerformed(evt);
            }
        });

        tblProjekt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProjektID", "Projektnamn", "Beskrivning", "Startdatum", "Slutdatum", "Kostnad", "Status", "Prioritet", "Projektchef", "Land"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProjekt);

        btnDatumSök.setText("Sök");
        btnDatumSök.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatumSökActionPerformed(evt);
            }
        });

        lblSokDatum.setText("Filtrera på datum");

        lblBindeStreck.setText("-");

        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnLäggTillProjekt)
                        .addGap(18, 18, 18)
                        .addComponent(btnÄndraProjekt)
                        .addGap(18, 18, 18)
                        .addComponent(btnTaBortProjekt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSokDatum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStartdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBindeStreck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSlutdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDatumSök))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cmbAvdelningsVal, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnÄndraProjekt)
                    .addComponent(btnTaBortProjekt)
                    .addComponent(btnLäggTillProjekt)
                    .addComponent(btnDatumSök)
                    .addComponent(lblSokDatum)
                    .addComponent(txtStartdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBindeStreck)
                    .addComponent(txtSlutdatumSök, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAvdelningsVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnÄndraProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnÄndraProjektActionPerformed
        editProjekt();
    }//GEN-LAST:event_btnÄndraProjektActionPerformed

    private void btnLäggTillProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLäggTillProjektActionPerformed
        EditProjekt editProjekt = new EditProjekt(idb);
        editProjekt.setVisible(true);
    }//GEN-LAST:event_btnLäggTillProjektActionPerformed

    private void btnTaBortProjektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortProjektActionPerformed
        int selectedRow = tblProjekt.getSelectedRow();
        if (selectedRow != -1) {
            int input = JOptionPane.showConfirmDialog(rootPane, "Är du säker på att du vill ta bort projektet?", "Ta bort projekt", JOptionPane.YES_NO_OPTION);
            if (input == 0) {
                Object projekt = tblProjekt.getValueAt(selectedRow, 0); // Hämta värde från kolumn 0
                int queryPid = Integer.parseInt(projekt.toString()); // Konvertera till String
//                nyttProjekt.taBortProjekt(queryPid);    //metod för att faktiskt ta bort projekt från databasen
                System.out.println("Projektet har tagits bort");
            }
            // JOptionPane.showMessageDialog(this, "Valt ID: " + projekt);
        } else {
            JOptionPane.showMessageDialog(null, "Ingen rad är markerad!");
        }
    }//GEN-LAST:event_btnTaBortProjektActionPerformed

    private void cmbAvdelningsValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAvdelningsValActionPerformed
        if (cmbAvdelningsVal.getSelectedIndex() == 0){  //Får inte denna att funka för att hämta in alla projekt igen?? 
            hamtaProjekt();
        }
        ArrayList<HashMap<String, String>> soktaProjekt;
        try {
            String valdAvdelning = cmbAvdelningsVal.getSelectedItem().toString();
            String fraga = "Select * from projekt where pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning in (select avdid from avdelning where avdelning.namn = '" + valdAvdelning + "')))";
            soktaProjekt = idb.fetchRows(fraga);
            formateraTabell(soktaProjekt);
            
        } catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }//GEN-LAST:event_cmbAvdelningsValActionPerformed

    private void btnDatumSökActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatumSökActionPerformed
        String startDatum = "1000-01-01";
        String slutDatum = "3000-12-31";
        
        if (!txtStartdatumSök.getText().isBlank()) {
            startDatum = txtStartdatumSök.getText();
        }
        if (!txtSlutdatumSök.getText().isBlank()) {
            slutDatum = txtSlutdatumSök.getText();
        }
        boolean valideringStart = Validering.datumKontroll(txtStartdatumSök) && Validering.datumFöreKontroll(slutDatum, txtStartdatumSök);
        boolean valideringSlut = Validering.datumKontroll(txtSlutdatumSök) && Validering.datumEfterKontroll(startDatum, txtSlutdatumSök);
        
        if (valideringStart && valideringSlut) {

            ArrayList<HashMap<String, String>> soktaProjekt;
            try {
                String fraga = "Select * from projekt where startdatum >= '" + startDatum + "' AND slutdatum <= '" + slutDatum + "';";
                soktaProjekt = idb.fetchRows(fraga);
                formateraTabell(soktaProjekt);

            } catch (InfException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Databasfel");
            }
        }
    }//GEN-LAST:event_btnDatumSökActionPerformed

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
       
        if (cmbStatus.getSelectedIndex() == 0) {
            hamtaProjekt();
        }
        ArrayList<HashMap<String, String>> soktaProjekt;
        String valdStatus = cmbStatus.getSelectedItem().toString();
        String valdAvdelning = cmbAvdelningsVal.getSelectedItem().toString();
        if (cmbAvdelningsVal.getSelectedIndex() == 0) {
            try {
                String fraga = "Select * from projekt where status = '" + valdStatus + "';";
                soktaProjekt = idb.fetchRows(fraga);
                formateraTabell(soktaProjekt);

            } catch (InfException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Databasfel");
            }
        } else {
            try {
                String fraga = "Select * from projekt where status = '" + valdStatus + "' and pid in (select pid from ans_proj where aid in (select aid from anstalld where avdelning in (select avdid from avdelning where avdelning.namn = '" + valdAvdelning + "')));";
                soktaProjekt = idb.fetchRows(fraga);
                formateraTabell(soktaProjekt);

            } catch (InfException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Databasfel");
            }
        }
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void fyllCmbAvdelningar()
    {
        String sqlfråga = "select namn from avdelning";
        ArrayList<String> allaAvdelningar;
        cmbAvdelningsVal.addItem("Alla avdelningar");
        try {
            allaAvdelningar = idb.fetchColumn(sqlfråga);
            for (String avdelning : allaAvdelningar)
                cmbAvdelningsVal.addItem(avdelning);
        }
        catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }
    
    private void fyllCmbStatus() {
        String sqlfråga = "select distinct status from projekt;";
        ArrayList<String> allaStatus;
        cmbStatus.addItem("Välj status");
        try {
            allaStatus = idb.fetchColumn(sqlfråga);
            for (String status : allaStatus)
                cmbStatus.addItem(status);
        }
        catch (InfException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
    }
    private void formateraTabell(ArrayList<HashMap<String, String>> param) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setRowCount(0);

        // Lägg till kolumnnamn i modellen
        tableModel.addColumn("ID");
        tableModel.addColumn("Projektnamn");
        tableModel.addColumn("Beskrivning");
        tableModel.addColumn("Startdatum");
        tableModel.addColumn("Slutdatum");
        tableModel.addColumn("Kostnad");
        tableModel.addColumn("Status");
        tableModel.addColumn("Prioritet");
        tableModel.addColumn("Projektchef");
        tableModel.addColumn("Land");

        // Fyller table med data från databasen
        for (HashMap<String, String> rad : param) {
            tableModel.addRow(new Object[]{
                rad.get("pid"),
                rad.get("projektnamn"),
                rad.get("beskrivning"),
                rad.get("startdatum"),
                rad.get("slutdatum"),
                rad.get("kostnad"),
                rad.get("status"),
                rad.get("prioritet"),
                rad.get("projektchef"),
                rad.get("land")
            });
            // Sätt modellen på JTable
            tblProjekt.setModel(tableModel);
        }
    }
    private void hamtaProjekt() {
        try {
            ArrayList<HashMap<String, String>> resultat = nyttProjekt.getAllaProjekt();
            formateraTabell(resultat);
        }
        catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    } 
    private void hamtaProjekt(int aid) {
        try {
            ArrayList<HashMap<String, String>> resultat = nyttProjekt.getAllaProjektFranAid(aid);
            
            formateraTabell(resultat);
        }
        catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    private void hamtaProjektSomProjektChef(String aid) {
        int PCAid = Integer.parseInt(aid);
        try {
            ArrayList<HashMap<String, String>> resultat = nyttProjekt.getAllaProjektSomProjektChef(PCAid);
            
            formateraTabell(resultat);
        }
        catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
            
    private void editProjekt() {
        int selectedRow = tblProjekt.getSelectedRow();
        if (selectedRow != -1) {
            Object projekt = tblProjekt.getValueAt(selectedRow, 0); // Hämta värde från kolumn 0
            int queryPid = Integer.parseInt(projekt.toString()); // Konvertera till String
            new EditProjekt(idb, queryPid).setVisible(true); //öppnar nytt fönster, skickar med den projektets PID från databasen

            // JOptionPane.showMessageDialog(this, "Valt ID: " + projekt);
        } else {
            JOptionPane.showMessageDialog(null, "Ingen rad är markerad!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDatumSök;
    private javax.swing.JButton btnLäggTillProjekt;
    private javax.swing.JButton btnTaBortProjekt;
    private javax.swing.JButton btnÄndraProjekt;
    private javax.swing.JComboBox<String> cmbAvdelningsVal;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBindeStreck;
    private javax.swing.JLabel lblSokDatum;
    private javax.swing.JTable tblProjekt;
    private javax.swing.JTextField txtSlutdatumSök;
    private javax.swing.JTextField txtStartdatumSök;
    // End of variables declaration//GEN-END:variables
}
